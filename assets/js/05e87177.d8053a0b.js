"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[37084],{58788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var s=t(17624),i=t(4552);const o={sidebar_position:0},r="if then else",c={id:"onchain/Control Flow/pif",title:"if then else",description:"As a solution to conditional code execution plu-ts exposes an if then else construct.",source:"@site/docs/onchain/Control Flow/pif.mdx",sourceDirName:"onchain/Control Flow",slug:"/onchain/Control Flow/pif",permalink:"/onchain/Control Flow/pif",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/Control Flow/pif.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Control Flow",permalink:"/category/control-flow"},next:{title:"pmatch",permalink:"/onchain/Control Flow/pmatch"}},l={},a=[{value:"Why <code>pif</code> is a typescript function and not a constant like other <code>plu-ts</code> functions?",id:"why-pif-is-a-typescript-function-and-not-a-constant-like-other-plu-ts-functions",level:3},{value:"What happens if one of the two branches raises an error?",id:"what-happens-if-one-of-the-two-branches-raises-an-error",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"if-then-else",children:"if then else"}),"\n",(0,s.jsxs)(n.p,{children:["As a solution to ",(0,s.jsx)(n.em,{children:"conditional code execution"})," ",(0,s.jsx)(n.code,{children:"plu-ts"})," exposes an ",(0,s.jsx)(n.em,{children:"if then else"})," construct."]}),"\n",(0,s.jsxs)(n.p,{children:["However, since everything in ",(0,s.jsx)(n.code,{children:"plu-ts"})," is an expression, the ",(0,s.jsx)(n.em,{children:"if then else"})," construct does not allow stuff that in typescript would have been written as"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"if( my_condition )\n{\n    doSomething();\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Because we don't really know what to do if the condition is false."}),"\n",(0,s.jsxs)(n.p,{children:["So the ",(0,s.jsx)(n.em,{children:"if then else"})," we have in ",(0,s.jsx)(n.code,{children:"plu-ts"})," is more similar to the typescript ",(0,s.jsx)(n.code,{children:"? :"})," ternary operator, so at the end of the day, ",(0,s.jsx)(n.em,{children:"if then else"})," is just a function."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's look at a simple ",(0,s.jsx)(n.em,{children:"if then else"})," construct:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pif( int ).$( true )\n.then( 42 )\n.else( 69 )\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This ",(0,s.jsx)(n.code,{children:"plu-ts"})," expression checks the condition (in our case ",(0,s.jsx)(n.code,{children:"pBool(true)"}),"; remember that ",(0,s.jsx)(n.code,{children:"plu-ts"})," is converting the typescript value for us)"]}),"\n",(0,s.jsxs)(n.p,{children:["And, if it is a ",(0,s.jsx)(n.code,{children:"Term<PBool>"})," equivalent to ",(0,s.jsx)(n.code,{children:"true"})," it returns ",(0,s.jsx)(n.code,{children:"pInt(42)"})," otherwise it returns ",(0,s.jsx)(n.code,{children:"pInt(69)"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"why-pif-is-a-typescript-function-and-not-a-constant-like-other-plu-ts-functions",children:["Why ",(0,s.jsx)(n.code,{children:"pif"})," is a typescript function and not a constant like other ",(0,s.jsx)(n.code,{children:"plu-ts"})," functions?"]}),"\n",(0,s.jsxs)(n.p,{children:["Since the type of ",(0,s.jsx)(n.em,{children:"if then else"})," is something like ",(0,s.jsx)(n.code,{children:"bool -> a -> a -> a"}),", we need to specify the type of ",(0,s.jsx)(n.code,{children:"a"})," ",(0,s.jsx)(n.em,{children:"prior"})," to the actual expression."]}),"\n",(0,s.jsxs)(n.p,{children:["This ensures ",(0,s.jsx)(n.em,{children:"type safety"})," so that Typescript can warn you if one of the results is not of the type you expect it to be."]}),"\n",(0,s.jsx)(n.p,{children:"Doing so Typescript can catch stuff like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'pif( int ).$( true )\n.then( 42 )\n// "muahahah" is converted to `pStr("muahahah")`\n// which is obviously not of type `int`\n// highlight-error\n.else( "muahahah" )\n'})}),"\n",(0,s.jsx)(n.h2,{id:"what-happens-if-one-of-the-two-branches-raises-an-error",children:"What happens if one of the two branches raises an error?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"plu-ts"})," is a ",(0,s.jsx)(n.em,{children:"strict language"})," as we saw while having a look at ",(0,s.jsx)(n.a,{href:"../Values/Functions/Function_application",children:(0,s.jsx)(n.code,{children:"papp"})}),"; that means that arguments are evaluated ",(0,s.jsx)(n.em,{children:"prior"})," being passed to a function."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"what happens if one of the argument returns an error?"})}),"\n",(0,s.jsxs)(n.p,{children:["The answer is ",(0,s.jsx)(n.em,{children:"what you expect to happen"}),". Or, to be more precise, if the error rose in the branch selected by the boolean, the computation results in an error; if not it returns the result."]}),"\n",(0,s.jsxs)(n.p,{children:["This is because even if by default functions are strict, ",(0,s.jsx)(n.code,{children:"pif"})," is ",(0,s.jsx)(n.em,{children:"lazy"}),"; meaning that it evaluates only the argument it needs and not the others."]}),"\n",(0,s.jsxs)(n.p,{children:["This is done using ",(0,s.jsxs)(n.a,{href:"../Optimizations/pforce%20and%20pdelay",children:[(0,s.jsx)(n.code,{children:"pforce"})," and ",(0,s.jsx)(n.code,{children:"pdelay"})]})," so the compiled function is a bit larger than the one you'd expect."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["if you don't need ",(0,s.jsx)(n.em,{children:"laziness"})," you can use the ",(0,s.jsx)(n.code,{children:"pstrictIf"})," function that emits slightly less code but evaluates both the arguments."]}),"\n",(0,s.jsx)(n.p,{children:"so something like"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pstrictIf( int ).$( pBool( true ) )\n.$( pInt(42) )\n.$( pInt(69) )\n"})}),"\n",(0,s.jsx)(n.p,{children:"is just fine but something like"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// this results in an error, even if the conditional is true\npstrictIf( int ).$( pBool( true ) )\n.then( pInt(42) )\n.else( perror( int ) ) // KABOOM\n"})}),"\n",(0,s.jsxs)(n.p,{children:["generally speaking you should always prefer the plain ",(0,s.jsx)(n.code,{children:"pif"})]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>r});var s=t(11504);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);