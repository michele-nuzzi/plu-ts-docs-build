"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[1408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),k=a,m=c["".concat(s,".").concat(k)]||c[k]||u[k]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:8},o="PStakingCredentialss",l={unversionedId:"onchain/API/types/PStakingCredentials",id:"onchain/API/types/PStakingCredentials",title:"PStakingCredentialss",description:"staking credentials; used as the second (optional) part of an address and responsabile of moving stake around.",source:"@site/docs/onchain/API/types/PStakingCredentials.mdx",sourceDirName:"onchain/API/types",slug:"/onchain/API/types/PStakingCredentials",permalink:"/docs/onchain/API/types/PStakingCredentials",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/API/types/PStakingCredentials.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"PDCert",permalink:"/docs/onchain/API/types/PDCert"},next:{title:"PCredential",permalink:"/docs/onchain/API/types/PCredential"}},s={},p=[{value:"<code>PStakingHash</code>",id:"pstakinghash",level:2},{value:"<code>_0</code>",id:"_0",level:3},{value:"<code>PStakingPtr</code>",id:"pstakingptr",level:2},{value:"<code>_0</code>",id:"_0-1",level:3},{value:"<code>_1</code>",id:"_1",level:3},{value:"<code>_2</code>",id:"_2",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pstakingcredentialss"},(0,a.kt)("inlineCode",{parentName:"h1"},"PStakingCredentialss")),(0,a.kt)("p",null,"staking credentials; used as the second (optional) part of an address and responsabile of moving stake around."),(0,a.kt)("p",null,"definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const PStakingCredentials = pstruct({\n    PStakingHash: { _0: PCredential.type },\n    PStakingPtr: {\n        _0: int,\n        _1: int,\n        _2: int\n    }\n});\n")),(0,a.kt)("h2",{id:"pstakinghash"},(0,a.kt)("inlineCode",{parentName:"h2"},"PStakingHash")),(0,a.kt)("p",null,"actual stake credentials (either pubKeyHash or validator hash)"),(0,a.kt)("h3",{id:"_0"},(0,a.kt)("inlineCode",{parentName:"h3"},"_0")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"./PCredential"},(0,a.kt)("inlineCode",{parentName:"a"},"PCredential"))),(0,a.kt)("h2",{id:"pstakingptr"},(0,a.kt)("inlineCode",{parentName:"h2"},"PStakingPtr")),(0,a.kt)("p",null,"stake credential pointer;"),(0,a.kt)("h3",{id:"_0-1"},(0,a.kt)("inlineCode",{parentName:"h3"},"_0")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"../../stdlib/TermInt"},(0,a.kt)("inlineCode",{parentName:"a"},"TermInt"))),(0,a.kt)("h3",{id:"_1"},(0,a.kt)("inlineCode",{parentName:"h3"},"_1")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"../../stdlib/TermInt"},(0,a.kt)("inlineCode",{parentName:"a"},"TermInt"))),(0,a.kt)("h3",{id:"_2"},(0,a.kt)("inlineCode",{parentName:"h3"},"_2")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"../../stdlib/TermInt"},(0,a.kt)("inlineCode",{parentName:"a"},"TermInt"))))}u.isMDXComponent=!0}}]);