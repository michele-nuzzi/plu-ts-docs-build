"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5632],{26844:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(17624),s=t(4552);const o={sidebar_position:0},l="plet",r={id:"onchain/Optimizations/plet",title:"plet",description:"Up until this part of the documentation we wrote plu-ts code that didn't need to re-use values, but in a real case scenario that is quite common.",source:"@site/docs/onchain/Optimizations/plet.mdx",sourceDirName:"onchain/Optimizations",slug:"/onchain/Optimizations/plet",permalink:"/onchain/Optimizations/plet",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/Optimizations/plet.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Optimizations",permalink:"/category/optimizations"},next:{title:"phoist",permalink:"/onchain/Optimizations/phoist"}},a={},c=[{value:"Use <code>plet</code> Luke!",id:"use-plet-luke",level:2},{value:"How does <code>plet</code> work?",id:"how-does-plet-work",level:3},{value:"force execution with <code>plet().in()</code>",id:"force-execution-with-pletin",level:2},{value:"&quot;<code>plet</code>ting&quot; utility terms methods",id:"pletting-utility-terms-methods",level:2},{value:"When is convenient NOT to <code>plet</code>?",id:"when-is-convenient-not-to-plet",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"plet",children:(0,i.jsx)(n.code,{children:"plet"})}),"\n",(0,i.jsxs)(n.p,{children:["Up until this part of the documentation we wrote ",(0,i.jsx)(n.code,{children:"plu-ts"})," code that didn't need to re-use values, but in a real case scenario that is quite common."]}),"\n",(0,i.jsxs)(n.p,{children:["One might think that storing the result of a ",(0,i.jsx)(n.code,{children:"plu-ts"})," function call can solve the issue, but it actually doesn't."]}),"\n",(0,i.jsx)(n.p,{children:"Let's take a look at the following code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pdoubleFactorial = plam( int, int )\n    ( n => {\n        // DON'T COPY THIS CODE; THIS IS REALLY BAD\n        // bad-practice-start\n        const factorialResult = pfactorial.$( n )\n\n        return factorialResult.add( factorialResult );\n        // bad-practice-end\n    });\n"})}),"\n",(0,i.jsx)(n.p,{children:"At first glance, the code above is not doing anything bad, right?"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"WRONG!"})}),"\n",(0,i.jsxs)(n.p,{children:["From the ",(0,i.jsx)(n.code,{children:"plu-ts"})," point of view the function above is defined as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pdoubleFactorial = plam( int, int )\n    ( n => \n        pfactorial.$( n ).add( pfactorial.$( n ) ) \n    );\n"})}),"\n",(0,i.jsxs)(n.p,{children:["which is calling ",(0,i.jsx)(n.code,{children:"pfactorial.$( n )"})," twice!"]}),"\n",(0,i.jsxs)(n.p,{children:["The intention of the above code is to store the result of ",(0,i.jsx)(n.code,{children:"pfactorial.$( n )"})," in a variable and then re-use that result, but that is not what is going on here."]}),"\n",(0,i.jsxs)(n.h2,{id:"use-plet-luke",children:["Use ",(0,i.jsx)(n.code,{children:"plet"})," Luke!"]}),"\n",(0,i.jsxs)(n.p,{children:["Fortunately ",(0,i.jsx)(n.code,{children:"plu-ts"})," exposes the ",(0,i.jsx)(n.code,{children:"plet"})," function that does exactly that; we can rewrite the above code as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pdoubleFactorial = plam( int, int )\n    ( n => {\n        // highlight-solution\n        const factorialResult = plet( pfactorial.$( n ) )\n\n        return factorialResult.add( factorialResult );\n    });\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This way ",(0,i.jsx)(n.code,{children:"plu-ts"})," can first execute the ",(0,i.jsx)(n.code,{children:"pfactorial.$( n )"})," function call and store the result in the ",(0,i.jsx)(n.code,{children:"factorialResult"})," which was the intended behaviour in the first place."]}),"\n",(0,i.jsxs)(n.h3,{id:"how-does-plet-work",children:["How does ",(0,i.jsx)(n.code,{children:"plet"})," work?"]}),"\n",(0,i.jsx)(n.p,{children:"When used as in the snippet above the compiler will take a look at how the value you stored in a varible is used and might decide to inline it if it decides that it is more efficient."}),"\n",(0,i.jsx)(n.p,{children:"This will mosto of the time due to the value being used a single time."}),"\n",(0,i.jsxs)(n.p,{children:["So even if you are using the result of ",(0,i.jsx)(n.code,{children:"pfactorial.$( n )"})," a single time using ",(0,i.jsx)(n.code,{children:"plet"})," won't store the result in a variable because there's no advantage;"]}),"\n",(0,i.jsx)(n.p,{children:"But still if you use it two or more time it will be stored in a variable instead so that it is computed only once-"}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["When in doubt use ",(0,i.jsx)(n.code,{children:"plet"}),";"]}),(0,i.jsx)(n.p,{children:"The compiler is smart enough to unsertand if it should be inlined or stored in a variable"})]}),"\n",(0,i.jsxs)(n.h2,{id:"force-execution-with-pletin",children:["force execution with ",(0,i.jsx)(n.code,{children:"plet().in()"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can opt out the compiler taking control using the ",(0,i.jsx)(n.code,{children:"plet"}),"'s ",(0,i.jsx)(n.code,{children:"in"})," method."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"plet( stuff ).in( myVar => {/*...*/})"})," construct ",(0,i.jsx)(n.strong,{children:"forces"})," the term to be stored in a variable ",(0,i.jsx)(n.strong,{children:"even if used once"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"There are some cases where this might be the desired behaviour;"}),"\n",(0,i.jsxs)(n.p,{children:["as an example using the ",(0,i.jsx)(n.code,{children:"in"})," method makes clear the scope of the variable;"]}),"\n",(0,i.jsx)(n.p,{children:"but the most common use case is when you have a single reference in a piece of code that is recursive."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="recursive example"',children:"const fancyDoubleMult = phoist(\n    pfn([ int, int ], int)\n    ((a, b) => {\n\n        // highlight-bad\n        const myVar = plet( pInt(a).add(a) );\n\n        // how you would implement multiplication using only additions\n        return precursive(\n            pfn([\n                lam( int, int ),\n                int\n            ],  int)\n            (( self, n ) => {\n\n                return pif( int ).$( n.ltEq( 0 ) )\n                .then( 0 )\n                .else(\n                    // bad-start\n                    // we only have a single refernce here;\n                    // so this `myVar` might be inlined\n                    myVar.add( self.$( n.sub( 1 ) ) )\n                    // bad-end\n                );\n            })\n        ).$( b )\n    })\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Even though the compiler will try to do its best, if you want to be sure that you are not re executing some code for each recursive call you can use ",(0,i.jsx)(n.code,{children:"plet( stuff ).in( myVar => {/*...*/})"}),", as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="recursive example"',children:"const fancyDoubleMult = phoist(\n    pfn([ int, int ], int)\n    ((a, b) => {\n\n        // here we force `myVar` to be evaluated\n        // and stored in a variable\n        // highlight-solution\n        return plet( pInt(a).add(a) ).in( myVar => \n            precursive(\n                pfn([\n                    lam( int, int ),\n                    int\n                ],  int)\n                (( self, n ) => {\n\n                    return pif( int ).$( n.ltEq( 0 ) )\n                    .then( 0 )\n                    .else(\n                        // same expression but we know \n                        // we are not re-running `myVar`'s expression\n                        // highlight-solution\n                        myVar.add( self.$( n.sub( 1 ) ) )\n                    );\n                })\n            ).$( b )\n        );\n\n    })\n)\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"pletting-utility-terms-methods",children:['"',(0,i.jsx)(n.code,{children:"plet"}),'ting" utility terms methods']}),"\n",(0,i.jsxs)(n.p,{children:["When working with ",(0,i.jsx)(n.a,{href:"../../category/stdlib",children:"utility terms"})," it's important not to forget that the methods\nare just ",(0,i.jsx)(n.a,{href:"../Values/Functions/partial_function_app",children:"partially applied functions"})," so if you plan to use some of the methods more than once is a good idea to ",(0,i.jsx)(n.code,{children:"plet"})," them."]}),"\n",(0,i.jsxs)(n.p,{children:["As an example, when working with the ",(0,i.jsx)(n.code,{children:"TermList<PElemsT>"})," utility term, intuition might lead you to just reuse the ",(0,i.jsx)(n.code,{children:"length"})," property more than once in various places; but actually, each time you do something like ",(0,i.jsx)(n.code,{children:"list.length"})," (where ",(0,i.jsx)(n.code,{children:"list"})," is a ",(0,i.jsx)(n.code,{children:"TermList"}),"); you are just writing ",(0,i.jsx)(n.code,{children:"plength.$( list )"})," (as in the first case introduced here) which is an ",(0,i.jsx)(n.code,{children:"O(n)"})," operation!"]}),"\n",(0,i.jsx)(n.p,{children:"What you really want to do in these cases is something like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// highlight-next-line\nplet( list.length ).in( myLength => {\n    ...\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is also true for terms that do require some arguments."}),"\n",(0,i.jsxs)(n.p,{children:["Say you need to access different elements of the ",(0,i.jsx)(n.strong,{children:"same list"})," multiple times:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const addFirstTwos = lam( list( int ), int )\n    ( list => \n        padd\n        .$( list.at( 0 ) ) \n        .$( list.at( 1 ) ) \n    );\n"})}),"\n",(0,i.jsxs)(n.p,{children:["What you are ",(0,i.jsx)(n.strong,{children:"actually"})," writing there is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const addFirstTwos = lam( list( int ), int )\n    ( list => \n        padd\n        .$( pindex( int ).$( list ).$( 0 ) ) \n        .$( pindex( int ).$( list ).$( 1 ) ) \n    );\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you notice, you are re-writing ",(0,i.jsx)(n.code,{children:"pindexList( int ).$( list )"})," which is a very similar case of calling the ",(0,i.jsx)(n.code,{children:"pfactorial"})," function we saw before twice."]}),"\n",(0,i.jsx)(n.p,{children:"Instead is definitely more efficient something like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const addFirstTwos = lam( list( int ), int )\n    ( list => \n        // store the function to access the elements of the list\n        // in the `elemAt` variable\n        // highlight-next-line\n        plet( list.atTerm ).in( elemAt =>\n            padd\n            .$( elemAt.$( 0 ) )\n            .$( elemAt.$( 1 ) ) \n        )\n    );\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"when-is-convenient-not-to-plet",children:["When is convenient NOT to ",(0,i.jsx)(n.code,{children:"plet"}),"?"]}),"\n",(0,i.jsxs)(n.p,{children:["You definitely don't want to ",(0,i.jsx)(n.code,{children:"plet"})," everything that is already in a variable; that includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"arguments of a function"}),"\n",(0,i.jsxs)(n.li,{children:["terms already ",(0,i.jsx)(n.code,{children:"plet"}),"ted before"]}),"\n",(0,i.jsxs)(n.li,{children:["terms that are already ",(0,i.jsx)(n.em,{children:"hoisted"})," (see the ",(0,i.jsx)(n.a,{href:"./phoist",children:"next section"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["terms extracted from a struct using ",(0,i.jsxs)(n.a,{href:"../Control%20Flow/pmatch",children:[(0,i.jsx)(n.code,{children:"pmatch"}),"/",(0,i.jsx)(n.code,{children:"extract"})]}),"; ",(0,i.jsx)(n.code,{children:"extract"})," or dot notation, since already wrapped in variables"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>l});var i=t(11504);const s={},o=i.createContext(s);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);