"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[82728],{79148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=n(17624),s=n(4552);const o={sidebar_position:7},r="TermFn<PIns[],POut>",c={id:"onchain/stdlib/TermFn<PIns,POut>",title:"TermFn<PIns[],POut>",description:"The type definition of TermFn is more complex than what it actually does; but that is only because it automatically handles functions with an unspecified (potentially infinite) number of parameters.",source:"@site/docs/onchain/stdlib/TermFn<PIns,POut>.mdx",sourceDirName:"onchain/stdlib",slug:"/onchain/stdlib/TermFn<PIns,POut>",permalink:"/onchain/stdlib/TermFn<PIns,POut>",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/stdlib/TermFn<PIns,POut>.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"TermPair<PFstT,PSndT>",permalink:"/onchain/stdlib/TermPair"},next:{title:"TermStruct<StructDef>",permalink:"/onchain/stdlib/TermStruct<StructDef>"}},a={},l=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"termfnpinspout",children:(0,i.jsx)(t.code,{children:"TermFn<PIns[],POut>"})}),"\n",(0,i.jsxs)(t.p,{children:["The type definition of ",(0,i.jsx)(t.code,{children:"TermFn"})," is more complex than what it actually does; but that is only because it automatically handles functions with an unspecified (potentially infinite) number of parameters."]}),"\n",(0,i.jsxs)(t.p,{children:['All it does tough is just adding the "',(0,i.jsx)(t.code,{children:"$"}),'" method that replaces the ',(0,i.jsx)(t.code,{children:"papp"})," call."]}),"\n",(0,i.jsx)(t.p,{children:"To give an idea here how the case of a function from a single input to a single output looks like,"}),"\n",(0,i.jsxs)(t.p,{children:["we'll call this type ",(0,i.jsx)(t.code,{children:"TermLam"})," even if there's no type called so in ",(0,i.jsx)(t.code,{children:"plu-ts"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type TermLam<PIn extends PType, POut extends PType> =\n    Term<PLam<PIn,POut>> & {\n        $: ( input: Term<PIn> ) => Term<POut>\n    }\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>c,M:()=>r});var i=n(11504);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);