"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[9022],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:0},s="Struct definition",i={unversionedId:"onchain/Values/Structs/definition",id:"onchain/Values/Structs/definition",title:"Struct definition",description:"When writing programs we often need to access data that is more articulate than simple integers or booleans; for this reason plu-ts allows ytou to define custom data-types.",source:"@site/docs/onchain/Values/Structs/definition.mdx",sourceDirName:"onchain/Values/Structs",slug:"/onchain/Values/Structs/definition",permalink:"/docs/onchain/Values/Structs/definition",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Values/Structs/definition.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Structs",permalink:"/docs/category/structs"},next:{title:"Generic Structs",permalink:"/docs/onchain/Values/Structs/generic_structs"}},c={},l=[{value:"<code>pstruct</code>",id:"pstruct",level:2},{value:"struct values",id:"struct-values",level:2},{value:"struct <code>plu-ts</code> type",id:"struct-plu-ts-type",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"struct-definition"},"Struct definition"),(0,a.kt)("p",null,"When writing programs we often need to access data that is more articulate than simple integers or booleans; for this reason ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," allows ytou to define custom data-types."),(0,a.kt)("h2",{id:"pstruct"},(0,a.kt)("inlineCode",{parentName:"h2"},"pstruct")),(0,a.kt)("p",null,"To define your own type all you need is the ",(0,a.kt)("inlineCode",{parentName:"p"},"pstruct")," typescript function."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pstruct")," takes as an argument an object that describes the structure of the new data-type and returns a Typescript class that represents our new type."),(0,a.kt)("p",null,"the type of a struct definition (which is teh argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"pstruct"),") is something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type StructDefiniton = {\n    [constructor: string]: {\n        [field: string]: TermType\n    }\n};\n")),(0,a.kt)("p",null,"From this type we can already see that a struct can have ",(0,a.kt)("em",{parentName:"p"},"multiple constructors")," (at least one) and each constructor can have 0 or more named fields."),(0,a.kt)("p",null,"This characteristic of having multiple constructors will allow for the creation of ",(0,a.kt)("em",{parentName:"p"},"custom control flows")," through the use of ",(0,a.kt)("a",{parentName:"p",href:"../../Control%20Flow/pmatch"},(0,a.kt)("inlineCode",{parentName:"a"},"pmatch")," described in its own section"),"."),(0,a.kt)("p",null,"For now let's focus on defining some new structs and say we wanted to define a datatype that describes a Dog."),(0,a.kt)("p",null,"We could do so by writing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// structs with single constructors acts in a similar way of plain typescript object\nconst Dog = pstruct({\n    // single constructor\n    Dog: {\n        name: str,\n        age: Age.type\n    }\n});\n")),(0,a.kt)("p",null,"but our dog needs some toys to play with when we are out. So we define a structure that describes some toys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Toy = pstruct({\n    Stick: {},\n    Ball: {\n        size: int,\n        isSoft: bool\n    },\n    Mailman: {\n        name: str,\n        age: Age.type\n    }\n})\n")),(0,a.kt)("p",null,"So now we can add a new field to better describe our dog:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Dog = pstruct({\n    Dog: {\n        name: str,\n        age: Age.type,\n        favouriteToy: Toy.type\n    }\n});\n")),(0,a.kt)("blockquote",null,(0,a.kt)("h2",{parentName:"blockquote",id:"important"},"IMPORTANT"),(0,a.kt)("p",{parentName:"blockquote"},"When defining a struct the order of the constructors and the order of the fields matters"),(0,a.kt)("p",{parentName:"blockquote"},"infact at UPLC level there are no names"),(0,a.kt)("p",{parentName:"blockquote"},"this does have two important implications"),(0,a.kt)("p",{parentName:"blockquote"},"1) structs with similar definition will be interchangeable; meaning that something like"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre"},"  ```ts\n  const Kid = pstruct({\n     Kid: {\n          name: str,\n          age: Age.type,\n          toy: Toy.type\n      }\n  });\n  ```\n  can be used in place of a `Dog` without anything breaking\n")),(0,a.kt)("p",{parentName:"blockquote"},"2) ",(0,a.kt)("strong",{parentName:"p"},"changing the order")," of constructors or fields ",(0,a.kt)("strong",{parentName:"p"},"gives back a totally different struct"))),(0,a.kt)("h2",{id:"struct-values"},"struct values"),(0,a.kt)("p",null,"To build a ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," value that represents a struct you just use one of the constructors you defined."),(0,a.kt)("p",null,"So if you where to create an instance of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," you'd just write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const myDog = Dog.Dog({\n\n    name: pStr("Pluto"),\n    age:  Age.from( pInt(3) ),\n\n    favouriteToy: Toy.Mailman({\n        name: pStr("Bob"),\n        age:  Age.from( pInt(42) )\n    })\n\n})\n')),(0,a.kt)("h2",{id:"struct-plu-ts-type"},"struct ",(0,a.kt)("inlineCode",{parentName:"h2"},"plu-ts")," type"),(0,a.kt)("p",null,"Like ",(0,a.kt)("a",{parentName:"p",href:"../aliases"},"aliases"),", structs also do have custom ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," types; which can be accessed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," static property"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const plutsTypeOfToy = Toy.type;\n")))}d.isMDXComponent=!0}}]);