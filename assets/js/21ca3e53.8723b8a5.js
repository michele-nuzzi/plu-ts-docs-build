"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[9268],{95848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var o=t(17624),i=t(4552);const s={sidebar_position:1},r="phoist",c={id:"onchain/Optimizations/phoist",title:"phoist",description:"Another great tool for optimizations is phoist and all hoisted terms.",source:"@site/docs/onchain/Optimizations/phoist.mdx",sourceDirName:"onchain/Optimizations",slug:"/onchain/Optimizations/phoist",permalink:"/onchain/Optimizations/phoist",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/Optimizations/phoist.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"plet",permalink:"/onchain/Optimizations/plet"},next:{title:"pforce and pdelay",permalink:"/onchain/Optimizations/pforce and pdelay"}},a={},h=[{value:"Can I use <code>phoist</code> everywhere?",id:"can-i-use-phoist-everywhere",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"phoist",children:(0,o.jsx)(n.code,{children:"phoist"})}),"\n",(0,o.jsxs)(n.p,{children:["Another great tool for optimizations is ",(0,o.jsx)(n.code,{children:"phoist"})," and all ",(0,o.jsx)(n.em,{children:"hoisted"})," terms."]}),"\n",(0,o.jsxs)(n.admonition,{title:"Hoisting",type:"info",children:[(0,o.jsxs)(n.p,{children:["( source: ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting",children:"MDN Docs/Hoisting"})," )"]}),(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, prior to execution of the code."}),"\n"]})]}),"\n",(0,o.jsxs)(n.p,{children:["You can think of ",(0,o.jsx)(n.em,{children:"hoisted terms"})," as terms that have been ",(0,o.jsx)(n.code,{children:"plet"}),"ted but in the global scope."]}),"\n",(0,o.jsxs)(n.p,{children:["So once you use a hoisted term once, each time you re-use it you are adding almost ",(0,o.jsx)(n.em,{children:"nothing"})," to the script size."]}),"\n",(0,o.jsxs)(n.p,{children:["You can create a hoisted term by using the ",(0,o.jsx)(n.code,{children:"phoist"})," function. This allows you to reuse the term you hoisted as many times as you want."]}),"\n",(0,o.jsxs)(n.p,{children:["This makes ",(0,o.jsx)(n.code,{children:"phoist"})," a great tool if you need to develop a library for ",(0,o.jsx)(n.code,{children:"plu-ts"}),"; because is likely your functions will be used a lot."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's say we wanted to create a library for math functions. We definitely want to have a way to calculate factorials;\nwe already defined ",(0,o.jsx)(n.code,{children:"pfactorial"})," while introducing ",(0,o.jsx)(n.a,{href:"../Control%20Flow/precursive",children:"recursion"}),", however that definition is not great if we need to re-use it a lot because the term is always inlined."]}),"\n",(0,o.jsx)(n.p,{children:"But now we know how to fix it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const pfactorial = \n    phoist( precursive(\n\n        pfn([\n            lam( int, int ),\n            int\n        ],  int)\n        \n        (( self, n ) =>\n            pif( int ).$(\n                n.ltEq( 1 )\n            )\n            .then( 1 )\n            .else(\n                self.$( n.sub( 1 ) )\n                .mult( n )\n            )\n        )\n\n    ))\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you compare this definiton with the previous one you'll see that nothing has changed except for the ",(0,o.jsx)(n.code,{children:"phoist"}),", that's it; now we can use ",(0,o.jsx)(n.code,{children:"pfactorial"})," as many times we want."]}),"\n",(0,o.jsxs)(n.h2,{id:"can-i-use-phoist-everywhere",children:["Can I use ",(0,o.jsx)(n.code,{children:"phoist"})," everywhere?"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"No"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"phoist"})," only accepts ",(0,o.jsx)(n.em,{children:"closed terms"})," (aka. Terms that do not contain external variables); if you pass a term that is not closed to ",(0,o.jsx)(n.code,{children:"phoist"})," it ",(0,o.jsx)(n.strong,{children:"throws"})," a ",(0,o.jsx)(n.code,{children:"BasePlutsError"})," error."]}),"\n",(0,o.jsx)(n.p,{children:"So things like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const fancyTerm = plam( int, int )\n    ( n => \n        // highlight-error\n        phoist( n.mult( 2 ) ); // error.\n    )\n"})}),"\n",(0,o.jsxs)(n.p,{children:["will throw at compilation time because the variable ",(0,o.jsx)(n.code,{children:"n"})," comes from ",(0,o.jsx)(n.em,{children:"outside"})," the ",(0,o.jsx)(n.code,{children:"phoist"})," function, hence the term is ",(0,o.jsx)(n.em,{children:"open"})," (not closed)."]})]})}function d(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>r});var o=t(11504);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);