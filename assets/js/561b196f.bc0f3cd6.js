"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[3052],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>x});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),l=n(6550),s=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,c]=h({queryString:n,groupId:a}),[p,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),k(e)}),[c,k,o]),tabValues:o}}var f=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==l&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function x(e){const t=(0,f.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},3174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={sidebar_position:-1,sidebar_class_name:"hidden"},s="Hello plu-ts",c={unversionedId:"examples/Hello_world_v0",id:"examples/Hello_world_v0",title:"Hello plu-ts",description:"You can find the last version here.",source:"@site/docs/examples/Hello_world_v0.mdx",sourceDirName:"examples",slug:"/examples/Hello_world_v0",permalink:"/docs/examples/Hello_world_v0",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/examples/Hello_world_v0.mdx",tags:[],version:"current",sidebarPosition:-1,frontMatter:{sidebar_position:-1,sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/category/examples"},next:{title:"Hello plu-ts",permalink:"/docs/examples/Hello World"}},u={},p=[{value:"Run-trough video",id:"run-trough-video",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Project set up",id:"project-set-up",level:2},{value:"The contract",id:"the-contract",level:2},{value:"Template overview",id:"template-overview",level:3},{value:"run the template",id:"run-the-template",level:3},{value:"Hello plu-ts",id:"hello-plu-ts-1",level:2},{value:"introduce an <code>owner</code>",id:"introduce-an-owner",level:3},{value:"send messages to the contracts",id:"send-messages-to-the-contracts",level:3},{value:"implement the logic",id:"implement-the-logic",level:3},{value:"Deployng the Contract",id:"deployng-the-contract",level:2},{value:"Create the Koios provider",id:"create-the-koios-provider",level:3},{value:"Create the transaction builder",id:"create-the-transaction-builder",level:3},{value:"get some founds",id:"get-some-founds",level:3},{value:"build the deploy transaction",id:"build-the-deploy-transaction",level:3},{value:"sign the deploy transaction",id:"sign-the-deploy-transaction",level:3},{value:"submit the deploy transaction",id:"submit-the-deploy-transaction",level:3},{value:"Using the Contract",id:"using-the-contract",level:2},{value:"get the reference UTxO",id:"get-the-reference-utxo",level:3},{value:"build the transaction",id:"build-the-transaction",level:3},{value:"sign and submit",id:"sign-and-submit",level:3},{value:"Return the <code>tADA</code>",id:"return-the-tada",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hello-plu-ts"},"Hello plu-ts"),(0,r.kt)("admonition",{title:"There is an updated version of this page",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"./Hello%20World"},"You can find the last version here"),".")),(0,r.kt)("h2",{id:"run-trough-video"},"Run-trough video"),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/b6MaSz6NIh8",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"All we need to build a Smart contract and interact with it is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"plu-ts")),(0,r.kt)("li",{parentName:"ul"},"some way to submit transactions.")),(0,r.kt)("p",null,"Infact, ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," allows you to write the smart contract and create transactions."),(0,r.kt)("p",null,"To submit the tranasction we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.koios.rest/"},"koios")," API, with a simple POST request to the ",(0,r.kt)("a",{parentName:"p",href:"https://api.koios.rest/#post-/submittx"},"submit endpoint"),";\nbut we'll think about that later."),(0,r.kt)("p",null,"So for now our pre-requisites add up to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"plu-ts")," (and ",(0,r.kt)("inlineCode",{parentName:"li"},"npm")," to install it)"),(0,r.kt)("li",{parentName:"ul"},"anything that can run javascript (server environment or browser, doesn't matter)"),(0,r.kt)("li",{parentName:"ul"},"an internet connection")),(0,r.kt)("h2",{id:"project-set-up"},"Project set up"),(0,r.kt)("p",null,"usign ",(0,r.kt)("inlineCode",{parentName:"p"},"git")," we clone a very simple template project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/HarmonicLabs/plu-ts-starter.git\nmv plu-ts-starter hello-pluts\ncd hello-pluts\ngit remote remove origin\n")),(0,r.kt)("p",null,"this gives us a simple project structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./hello-pluts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 contract.ts\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 MyDatum\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 MyRedeemer\n\u2502       \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json\n")),(0,r.kt)("p",null,"Now we only need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install")," to automatically add the ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"et voil\xe0")," we are ready to start!"),(0,r.kt)("h2",{id:"the-contract"},"The contract"),(0,r.kt)("h3",{id:"template-overview"},"Template overview"),(0,r.kt)("p",null,"If we now navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contract.ts")," we see we have a very simple validator already!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},'import { Address, bool, compile, makeValidator, PaymentCredentials, pBool, pfn, Script, ScriptType, V2 } from "@harmoniclabs/plu-ts";\nimport MyDatum from "./MyDatum";\nimport MyRedeemer from "./MyRedeemer";\n\n\n// highlight-start\nexport const contract = pfn([\n    MyDatum.type,\n    MyRedeemer.type,\n    V2.PScriptContext.type\n],  bool)\n(( datum, redeemer, ctx ) =>\n    // always suceeds\n    pBool( true )\n);\n// highlight-end\n\n\n///////////////////////////////////////////////////////////////////\n// ------------------------------------------------------------- //\n// ------------------------- utilities ------------------------- //\n// ------------------------------------------------------------- //\n///////////////////////////////////////////////////////////////////\n\nexport const untypedValidator = makeValidator( contract );\n\nexport const compiledContract = compile( untypedValidator );\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\nexport const scriptMainnetAddr = new Address(\n    "mainnet",\n    new PaymentCredentials(\n        "script",\n        script.hash\n    )\n);\n\nexport const scriptTestnetAddr = new Address(\n    "testnet",\n    new PaymentCredentials(\n        "script",\n        script.hash.clone()\n    )\n);\n\nexport default contract;\n')),(0,r.kt)("p",null,"Let's focus only on the contract for now;"),(0,r.kt)("p",null,"this contract expects a ",(0,r.kt)("inlineCode",{parentName:"p"},"MyDatum"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},"MyRedeemer")," and finally a ",(0,r.kt)("inlineCode",{parentName:"p"},"PScriptContext")," to validate a transaction."),(0,r.kt)("p",null,"All of the three above are just ",(0,r.kt)("a",{parentName:"p",href:"../onchain/Values/Structs/definition"},(0,r.kt)("inlineCode",{parentName:"a"},"Struct"),"s")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MyDatum")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MyRedeemer")," are types defined by us respectively in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/MyDatum/index.ts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"src/MyRedeemer/index.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/MyDatum/index.ts"',title:'"src/MyDatum/index.ts"'},'import { int, pstruct } from "@harmoniclabs/plu-ts";\n\n// modify the Datum as you prefer\nconst MyDatum = pstruct({\n    Num: {\n        number: int\n    },\n    NoDatum: {}\n});\n\nexport default MyDatum;\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/MyRedeemer/index.ts"',title:'"src/MyRedeemer/index.ts"'},'import { pstruct } from "@harmoniclabs/plu-ts";\n\n// modify the Redeemer as you prefer\nconst MyRedeemer = pstruct({\n    Option1: {},\n    Option2: {}\n});\n\nexport default MyRedeemer;\n')),(0,r.kt)("p",null,"whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"PScriptContex")," is a predefined data structure that is passed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-node")," itself that will run our smart contract."),(0,r.kt)("p",null,"finally, the contract is used in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.ts")," which is our entry point."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.ts"',title:'"src/index.ts"'},'import { script } from "./contract";\n\nconsole.log("validator compiled succesfully! \ud83c\udf89\\n");\nconsole.log(\n    JSON.stringify(\n        script.toJson(),\n        undefined,\n        2\n    )\n);\n')),(0,r.kt)("p",null,"the index just imports ",(0,r.kt)("inlineCode",{parentName:"p"},"script")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contract.ts")," adn prints it out in the json form."),(0,r.kt)("p",null,"if we go back to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contract.ts")," we see that the script is obtained using the following steps:"),(0,r.kt)("p",null,"1) adapting the validator to the standard using ",(0,r.kt)("a",{parentName:"p",href:"../onchain/API/utilities/makeValidator"},(0,r.kt)("inlineCode",{parentName:"a"},"makeValidator"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},"/* ... */\n\n// highlight-start\nexport const untypedValidator = makeValidator( contract );\n// highlight-end\n\nexport const compiledContract = compile( untypedValidator );\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\n/* ... */\n")),(0,r.kt)("p",null,"2) compiling the validator with ",(0,r.kt)("a",{parentName:"p",href:"../onchain/API/utilities/compile"},(0,r.kt)("inlineCode",{parentName:"a"},"compile"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},"/* ... */\n\nexport const untypedValidator = makeValidator( contract );\n\n// highlight-start\nexport const compiledContract = compile( untypedValidator );\n// highlight-end\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\n/* ... */\n")),(0,r.kt)("p",null,"3) wrapping it in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Script")," that can be used offchain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},"/* ... */\n\nexport const untypedValidator = makeValidator( contract );\n\nexport const compiledContract = compile( untypedValidator );\n\n// highlight-start\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n// highlight-end\n\n/* ... */\n")),(0,r.kt)("p",null,"that is all we need for now."),(0,r.kt)("h3",{id:"run-the-template"},"run the template"),(0,r.kt)("p",null,"If we did every step of above correctly we should be able to run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,r.kt)("p",null,"and the output should look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'validator compiled succesfully! \ud83c\udf89\n\n{\n  "type": "PlutusScriptV2",\n  "description": "",\n  "cborHex": "56550100002225333573466644494400c0080045261601"\n}\n')),(0,r.kt)("p",null,"Well congratulations \ud83e\udd73!"),(0,r.kt)("p",null,"this is your first compiled smart contract \ud83c\udf89!"),(0,r.kt)("p",null,"But we won't stop here for sure!"),(0,r.kt)("p",null,"Let's personalize this smart contract."),(0,r.kt)("h2",{id:"hello-plu-ts-1"},"Hello plu-ts"),(0,r.kt)("p",null,"We want to personalize the smart contract so that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it suceeds if the transaction is signed by us."),(0,r.kt)("li",{parentName:"ul"},"and we are being polite by saluting the contract.")),(0,r.kt)("h3",{id:"introduce-an-owner"},"introduce an ",(0,r.kt)("inlineCode",{parentName:"h3"},"owner")),(0,r.kt)("p",null,"To make sure the transaction is signed by us we'll keep track of an ",(0,r.kt)("inlineCode",{parentName:"p"},"owner")," in the datum (the first argument we saw in the contract)."),(0,r.kt)("admonition",{title:"datum",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The datum helps us keep track of the history of the input the smart contract is validating.")),(0,r.kt)("p",null,"Currently our datum is a struct, but it could be really anything;"),(0,r.kt)("p",null,"and all we need to keep track of an owner is just a public key hash."),(0,r.kt)("p",null,"so in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contract.ts")," we'll change ",(0,r.kt)("inlineCode",{parentName:"p"},"MyDatum")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"PPubKeyHash"),":"),(0,r.kt)("admonition",{title:"PPubKeyHash",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"PPubKeyHash")," is just an ",(0,r.kt)("a",{parentName:"p",href:"../onchain/Values/aliases"},(0,r.kt)("inlineCode",{parentName:"a"},"Alias"))," for bytestrings (of type ",(0,r.kt)("inlineCode",{parentName:"p"},"bs"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},'import { Address, bool, compile, makeValidator, PaymentCredentials, pBool, pfn, Script, ScriptType, V2 } from "@harmoniclabs/plu-ts";\nimport MyDatum from "./MyDatum";\nimport MyRedeemer from "./MyRedeemer";\n\nconst contract = pfn([\n    // highlight-next-line\n    PPubKeyHash.type,\n    MyRedeemer.type,\n    V2.PScriptContext.type\n],  bool)\n// highlight-next-line\n// we should also change the name of the variable here\n// highlight-next-line\n// from `datum` to `owner`\n// highlight-next-line\n(( owner, redeemer, ctx ) =>\n    // always suceeds\n    pBool( true )\n);\n\n/* ... */\n')),(0,r.kt)("h3",{id:"send-messages-to-the-contracts"},"send messages to the contracts"),(0,r.kt)("p",null,"The second condtion requires us to send some message to the contract."),(0,r.kt)("p",null,"This is done thanks to the redeemer (or the second argument of a validator)."),(0,r.kt)("admonition",{title:"redeemer",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The redeemer is the argument specified by the user that interacts with the smart contract")),(0,r.kt)("p",null,"once again, all we need in order to have a message is just a ",(0,r.kt)("inlineCode",{parentName:"p"},"bytestring"),", nothing more complex,"),(0,r.kt)("p",null,"so we'll change ",(0,r.kt)("inlineCode",{parentName:"p"},"MyRedeemer")," to the primitive type ",(0,r.kt)("inlineCode",{parentName:"p"},"bs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},'import { Address, bool, compile, makeValidator, PaymentCredentials, pBool, pfn, Script, ScriptType, V2 } from "@harmoniclabs/plu-ts";\nimport MyDatum from "./MyDatum";\nimport MyRedeemer from "./MyRedeemer";\n\nconst contract = pfn([\n    PPubKeyHash.type,\n    // highlight-next-line\n    bs,\n    V2.PScriptContext.type\n],  bool)\n// highlight-start\n// we should also change the name of the variable here\n// from `redeemer` to `message`\n(( owner, message, ctx ) =>\n// highlight-end\n    // always suceeds\n    pBool( true )\n);\n\n/* ... */\n')),(0,r.kt)("h3",{id:"implement-the-logic"},"implement the logic"),(0,r.kt)("p",null,"finally we'll check both the conditions in the body of the function."),(0,r.kt)("p",null,"so we'll first create a term that checks that the message is the one expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const isBeingPolite = message.eq("Hello plu-ts");\n')),(0,r.kt)("p",null,"then we'll check that the transaction is signed by the owner specified in the datum."),(0,r.kt)("p",null,"to do so we need informations about the tranasaction and who signed it."),(0,r.kt)("p",null,"all the informations about the tranasaction are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tx")," field of the ",(0,r.kt)("a",{parentName:"p",href:"../onchain/API/types/PScriptContex"},(0,r.kt)("inlineCode",{parentName:"a"},"PScriptContex"))),(0,r.kt)("p",null,"an in particular we are interested in the ",(0,r.kt)("a",{parentName:"p",href:"../onchain/API/types/PTxInfo#signatories"},(0,r.kt)("inlineCode",{parentName:"a"},"signatories")," field")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"ctx.tx.signatories;\n")),(0,r.kt)("p",null,"since this is a list of all the required singers we chan use all the ",(0,r.kt)("a",{parentName:"p",href:"../onchain/stdlib/TermList"},(0,r.kt)("inlineCode",{parentName:"a"},"TermList"))," methods;\nof which ",(0,r.kt)("a",{parentName:"p",href:"../onchain/stdlib/TermList#some"},(0,r.kt)("inlineCode",{parentName:"a"},"some"))," allows us to check that ",(0,r.kt)("strong",{parentName:"p"},"at leat one")," element of the list respects a given property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const signedByOwner = ctx.tx.signatories.some( owner.eqTerm );\n")),(0,r.kt)("p",null,"and finally, we put all together"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/contract.ts"',title:'"src/contract.ts"'},'/* ... */\n\nconst contract = pfn([\n    PPubKeyHash.type,\n    bs,\n    V2.PScriptContext.type\n],  bool)\n(( owner, message, ctx ) => {\n\n    const isBeingPolite = message.eq("Hello plu-ts");\n\n    const signedByOwner = ctx.tx.signatories.some( owner.eqTerm );\n\n    return isBeingPolite.and( signedByOwner );\n});\n\n/* ... */\n')),(0,r.kt)("p",null,"now runing the program with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run start")," gives us back:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'validator compiled succesfully! \ud83c\udf89\n\n{\n  "type": "PlutusScriptV2",\n  "description": "",\n  "cborHex": "58fd58fb0100003232323232323232323232222533357346664446600e66e3c00922010c48656c6c6f20706c752d74730013300823371e00200866014002464660180024640026601ceb8dd6180a0009aba1001375c0066eb800800452616225333573400400229408cc01c852891119802980200109801800912999ab9a00214a20024460026aae78dd5001119801000a5eb108c0088d5d01801000911980190801111198028011801800980091111919980398020009801800801198020018011191801119801001000918011198010010009112999aab9f001003133002357420026ae880048d5d09aba2357446ae88d5d11aba2357446ae88d5d100081"\n}\n')),(0,r.kt)("p",null,"We did it! We wrote our first contract!"),(0,r.kt)("h2",{id:"deployng-the-contract"},"Deployng the Contract"),(0,r.kt)("p",null,"now that we have our personal contract we'll use ","[Koios]"," to help us with the offchain."),(0,r.kt)("p",null,"for better integration we can install the ",(0,r.kt)("inlineCode",{parentName:"p"},"koios-pluts")," package so that we can make requests to koios and have actual plu-ts values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @harmoniclabs/koios-pluts\n")),(0,r.kt)("p",null,"eventually we'll also need some help with binary data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @harmoniclabs/uint8array-utils\n")),(0,r.kt)("p",null,"then to keep the project clean we'll create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"offchain")," folder, under ",(0,r.kt)("inlineCode",{parentName:"p"},"src")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir src/offchain\n")),(0,r.kt)("h3",{id:"create-the-koios-provider"},"Create the Koios provider"),(0,r.kt)("p",null,"To make sure we do all our requests in testnet ",(0,r.kt)("a",{parentName:"p",href:"../tools/koios-pluts"},(0,r.kt)("inlineCode",{parentName:"a"},"koios-pluts"))," exposes the utility class ",(0,r.kt)("inlineCode",{parentName:"p"},"KoiosProvoder"),"\nwhich will keep in mind the network we are operating in for us."),(0,r.kt)("p",null,"let's build an instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/offchain/koios.ts"',title:'"src/offchain/koios.ts"'},'import { KoiosProvider } from "@harmoniclabs/koios-pluts"\n\nexport const koios = new KoiosProvider("testnet");\n\nexport default koios;\n')),(0,r.kt)("h3",{id:"create-the-transaction-builder"},"Create the transaction builder"),(0,r.kt)("p",null,"To build a ",(0,r.kt)("a",{parentName:"p",href:"../offchain/TxBuilder%20API/TxBuilder"},(0,r.kt)("inlineCode",{parentName:"a"},"TxBuilder"))," we'll need to fetch the current protocol parameters, that is an asyncronous operation;"),(0,r.kt)("p",null,"so we'll write an asnyc function that constructs our transaction builder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/offchain/getTxBuilder.ts"',title:'"src/offchain/getTxBuilder.ts"'},'import { koios } from "./koios"\n\n/**\n * we don\'t want to do too many API call if we already have our `txBuilder`\n * \n * so after the first call we\'ll store a copy here.\n**/\nlet _cachedTxBuilder: TxBuilder | undefined = undefined\n\nexport default async function getTxBuilder(): Promise<TxBuilder>\n{\n    if(!( _cachedTxBuilder instanceof TxBuilder ))\n    _cachedTxBuilder = new TxBuilder(\n        "testnet",\n        await koios.epoch.protocolParams() // defaults to current epoch\n    );\n\n    return _cachedTxBuilder;\n}\n')),(0,r.kt)("h3",{id:"get-some-founds"},"get some founds"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.cardano.org/cardano-testnet/tools/faucet"},"Cardano Testnet Faucet"),"."),(0,r.kt)("p",null,"Just be sure to select the ",(0,r.kt)("strong",{parentName:"p"},"Preprod")," testnet."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"cardano-cli")," and address generation"),(0,r.kt)("p",{parentName:"admonition"},"If you are in a server environment (such as ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/"},"NodeJS"),", ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/"},"Deno")," or ",(0,r.kt)("a",{parentName:"p",href:"https://bun.sh/"},"Bun"),")\nyou can generate a testnet address by frist running"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cardano-cli address key-gen \\\n    --verification-key-file path/to/pubKey.vkey \\\n    --signing-key-file path/to/privKey.skey\n")),(0,r.kt)("p",{parentName:"admonition"},"and then using the verification key (public key) to generate an address."),(0,r.kt)("p",{parentName:"admonition"},"This can be done both using ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," or using ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," itself"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"plu-ts",label:"plu-ts",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const myTestnetAddress = new Address(\n    "testnet",\n    new PaymentCredentials(\n        "pubKey",\n        PublicKey.fromCbor(\n            JSON.parse( // the result of `cardano-cli` is a json file\n                readFileSync(\n                    "path/to/pubKey.vkey",\n                    { encoding: "utf8" }\n                ) \n            ).cborHex\n        ).hash\n    )\n)\n'))),(0,r.kt)(i.Z,{value:"cardano-cli",label:"cardano-cli",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cardano-cli address build \\\n    --payment-verification-key-file path/to/pubKey.vkey \\\n    --testnet-magic 1\n"))))),(0,r.kt)("admonition",{title:"return the test ADA",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"once you finish with your tADA make sure to return them to the faucet."),(0,r.kt)("p",{parentName:"admonition"},"tADA have no real world value but are still limited, and onther developers will need them!"),(0,r.kt)("p",{parentName:"admonition"},"to return tADA to the faucet just send them to the following testnet address:"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3"))),(0,r.kt)("h3",{id:"build-the-deploy-transaction"},"build the deploy transaction"),(0,r.kt)("p",null,"now that we have received our ",(0,r.kt)("inlineCode",{parentName:"p"},"tADA")," we can start playng."),(0,r.kt)("p",null,"Firs we need to access them in our code."),(0,r.kt)("p",null,"We can do so by querying the utxos at the address you received the tADA to."),(0,r.kt)("p",null,"since we'll query our utxos some times we make an utility function for that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/offchain/queryMyUtxos.ts"',title:'"src/offchain/queryMyUtxos.ts"'},'import type { UTxO } from "@harmoniclabs/plu-ts"\nimport { koios } from "./koios";\n\nexport default async function queryMyUtxos(): Promise<UTxO[]>\n{\n    return await koios.address.utxos( "<paste your tesnet address here>" )\n}\n')),(0,r.kt)("p",null,"now that we can access our utxos we can finally start building transactions."),(0,r.kt)("p",null,"The first transaction we want to do is to deploy the smart contract and found it."),(0,r.kt)("p",null,"Let's check we got everything:"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","smart contract"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,r.kt)("inlineCode",{parentName:"li"},"TxBuilder")),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","A way to comunicate with the blockchain")),(0,r.kt)("p",null,"yes, we can go!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/offchain/getDeployAndFoundTx.ts"',title:'"src/offchain/getDeployAndFoundTx.ts"'},'import { Address, Value, DataB, Script, Tx } from "@harmoniclabs/plu-ts"\nimport { scriptTestnetAddr } from "../contract";\nimport getTxBuilder from "./getTxBuilder";\nimport queryMyUtxos from "./queryMyUtxos";\n\n\nexport default async function getDeployAndFoundTx( script: Script ): Promise<Tx>\n{\n    const txBuilder = await getTxBuilder();\n    const myUTxOs = await queryMyUtxos();\n\n    return txBuilder.buildSync({\n        inputs: [{ utxo: myUTxOs[0] }],\n        outputs: [\n            { // output which holds the reference script\n                address: scriptTestnetAddr,\n                value: Value.lovelaces( 10_000_000 ),\n                // an utxo with no datum that sits \n                // that a script address (like in this case)\n                // is locked FOREVER\n                // this way no one will be able to "un-deploy" our smart contract\n                datum: undefined,\n                refScript: script\n            },\n            { // output holding the founds that we\'ll spend later\n                address: scriptTestnetAddr,\n                value: Value.lovelaces( 10_000_000 ),\n                // remeber to include a datum\n                datum: new DataB(\n                    // remember we set the datum to be the public key hash?\n                    // we can extract it from the address as follows\n\n                    // first create an address form the bech32 form\n                    Address.fromString( "<paste your address here>" )\n                    // then extract the pyament credential hash\n                    .paymentCreds.hash.toBuffer()\n                )\n            }\n        ],\n        // send everything left back to us\n        changeAddress: "<paste your address here>"\n    });\n\n}\n')),(0,r.kt)("p",null,"now that we have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tx")," we are just two steps away from it to be registered on-chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sign it"),(0,r.kt)("li",{parentName:"ul"},"submit it")),(0,r.kt)("h3",{id:"sign-the-deploy-transaction"},"sign the deploy transaction"),(0,r.kt)("p",null,"to sign a transaciton you'll need the private key of your address."),(0,r.kt)("p",null,"depending on your environment then there are two ways to sign it:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Browser",label:"Browser",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"In the browser we can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030#apisigntxtx-cbortransaction-partialsign-bool--false-promisecbortransaction_witness_set"},"CIP-0030"),"\nstandard to sign the transaction."),(0,r.kt)("p",null,"the standard wants us to pass the CBOR of the transaction encoded as hex string."),(0,r.kt)("p",null,"that is not a problem because we can get it as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"tx.toCbor().toString()\n")),(0,r.kt)("p",null,"it then returns a new CBOR encoded as hex string which represents the signature."),(0,r.kt)("p",null,"we can add the signature to our transaction as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const witnessSet = TxWitnessSet.fromCbor(\n    \"<CIP-0030 'signTx' result here>\"\n);\n\nfor(const vkeyWit of witnessSet.vkeyWitnesses)\n{\n    tx.addVKeyWitness( vkeyWit )\n}\n")),(0,r.kt)("p",null,"so all together becomes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function signWithBrowser( tx: Tx, cip30wallet: any ): void\n{\n    const witnessSet = TxWitnessSet.fromCbor(\n        await cip30wallet.signTx(\n            tx.toCbor().toString()\n        )\n    );\n\n    for(const vkeyWit of witnessSet.vkeyWitnesses)\n    {\n        tx.addVKeyWitness( vkeyWit )\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"NodeJS / Server",label:"NodeJS / Server",mdxType:"TabItem"},(0,r.kt)("p",null,"If we are in a server environmet is very likely we have our private key stored in some file."),(0,r.kt)("p",null,"so we can just read the private key from there."),(0,r.kt)("p",null,"Once we have teh private key we can then use it to sign the transaction; ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," handles the cryptography"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"tx.signWith( privateKey )\n")),(0,r.kt)("p",null,"and that's it"),(0,r.kt)("p",null,"so the final code is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function signWithServer( tx: Tx ): void\n{\n    tx.signWith(\n        PrivateKey.fromCbor(\n            JSON.parse( // the result of `cardano-cli` is a json file\n                readFileSync(\n                    "path/to/privKey.skey",\n                    { encoding: "utf8" }\n                ) \n            ).cborHex\n        )\n    );\n}\n')))),(0,r.kt)("h3",{id:"submit-the-deploy-transaction"},"submit the deploy transaction"),(0,r.kt)("p",null,"now we can finally deploy the smart contract all we need to do is just call the koios endpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.ts"',title:'"src/index.ts"'},'/* onther imports */\nimport { koios } from "./offchain/koios"\n\n/* ... */\n\nasync function main()\n{\n    let tx = await getDeployAndFoundTx( script );\n    signWithServer( tx );\n    await koios.tx.submit( tx );\n}\nmain();\n')),(0,r.kt)("h2",{id:"using-the-contract"},"Using the Contract"),(0,r.kt)("p",null,"The last step is to build a new trasaction that will allow us to spend the founds we sent to the contract."),(0,r.kt)("h3",{id:"get-the-reference-utxo"},"get the reference UTxO"),(0,r.kt)("p",null,"Apart for this step the process very similar."),(0,r.kt)("p",null,"If you remember we deployed our script to an UTxO that is locked forever."),(0,r.kt)("p",null,"We need that UTxO to interact with the contract."),(0,r.kt)("p",null,"we could query but we already have all the infos to build it ourselves."),(0,r.kt)("p",null,"an ",(0,r.kt)("inlineCode",{parentName:"p"},"UTxO")," is composed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutRef")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOut")),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutRef is just the hash of the "),"Tx` that generated it and the index in the order of the outputs."),(0,r.kt)("p",null,"so our ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOutRef")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const txOutRef = new TxOutRef({\n    id: tx.hash,\n    index: 0\n});\n")),(0,r.kt)("p",null,"and the ",(0,r.kt)("inlineCode",{parentName:"p"},"TxOut")," is the resolved reference, and we know exactly what's on that utxo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const txOut = new TxOut({\n    address: scriptTestnetAddr,\n    value: Value.lovelaces( 10_000_000 ),\n    refScript: script\n});\n")),(0,r.kt)("p",null,"so our reference utxo is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myRefUtxo = new UTxO({\n    utxoRef: txOutRef,\n    resolved: txOut\n});\n")),(0,r.kt)("h3",{id:"build-the-transaction"},"build the transaction"),(0,r.kt)("p",null,"with that utxo reference we can build our tranasction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/offchain/getSpendPoliteTx.ts"',title:'"src/offchain/getSpendPoliteTx.ts"'},'import { DataB, isData, Hash32, Tx, UTxO } from "@harmoniclabs/plu-ts"\nimport { scriptTestnetAddr } from "../contract";\nimport * as uint8array from "@harmoniclabs/uint8array-utils";\nimport koios from "./koios";\nimport getTxBuilder from "./getTxBuilder";\nimport queryMyUtxos from "./queryMyUtxos";\n\n\nexport default async function getSpendPoliteTx( myRefUtxo: UTxO ): Promise<Tx>\n{\n    const txBuilder = await getTxBuilder();\n    const myUTxOs = await queryMyUtxos();\n\n    // find the other utxo of the previous tx\n    const utxoToSpend = (await koios.address.utxos( scriptTestnetAddr ))\n        .find( utxo => isData( utxo.resolved.datum ) );\n\n    if( utxoToSpend === undefined )\n    {\n        throw "uopsie, are you sure your tx had enough time to get to the blockchain?"\n    }\n\n    return txBuilder.buildSync({\n        inputs: [\n            {\n                utxo: utxoToSpend,\n                // we must include the utxo that holds our script\n                referenceScriptV2: {\n                    refUtxo: myRefUtxo,\n                    datum: "inline", // the datum is present already on `utxoToSpend`\n                    redeemer: new DataB( uint8array.fromAscii("Hello plu-ts") ) // be polite\n                }\n            }\n        ],\n        // make sure to include collateral when using contracts\n        collaterals: [ myUTxOs[0] ],\n        // send everything back to us\n        changeAddress: "addr_test1vpv03vsr8mtgu7sftu82x0y3nmv4fs6xnkw5jvrkw3luw3ck4hmfa"\n    });\n}\n')),(0,r.kt)("h3",{id:"sign-and-submit"},"sign and submit"),(0,r.kt)("p",null,"We can re use the fuctions defined above for both signing and submission."),(0,r.kt)("p",null,"so all we need to do now is really just put everything together"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.ts"',title:'"src/index.ts"'},'import { script, scriptTestnetAddr } from "./contract";\nimport { koios } from "./offchain/koios";\n\n/* ... */\n\nasync main()\n{\n    let tx = await getDeployAndFoundTx( script );\n    await signTxServer( tx );\n    await koios.tx.submit( tx );\n\n    // highlight-start\n    console.log( "waiting for tx \'" + tx.hash.toString() + "\' to be on-chain...")\n    await koios.tx.waitConfirmed( tx );\n\n    const myRefUtxo = new UTxO({\n        utxoRef: new TxOutRef({\n            id: tx.hash,\n            index: 0\n        }),\n        resolved: new TxOut({\n            address: scriptTestnetAddr,\n            value: Value.lovelaces( 10_000_000 ),\n            refScript: script\n        })\n    });\n\n    tx = await getSpendPoliteTx( myRefUtxo )\n    signWithServer( tx );\n    await koios.tx.submit( tx );\n\n    console.log( "waiting for tx \'" + tx.hash.toString() + "\' to be on-chain...\\n\\n")\n    await koios.tx.waitConfirmed( tx );\n\n    console.log(\n        `Unlocked ${\n            tx.body.inputs[0].resolved.value.lovelaces / BigInt(1_000_00)\n        } tADA ` +\n        `from ${scriptTestnetAddr.toString()}!\\n\\n` +\n        `Check the transaction on Cardanoscan: https://preview.cardanoscan.io/transaction/${tx.hash.toString()}?tab=contracts`\n    )\n    // highlight-end\n}\nmain();\n')),(0,r.kt)("p",null,"If everything whent trough correctly running the program wiht ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run start")," should now show something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Unlocked 10 tADA from addr_test1vabcd... !\n\nCheck the transaction on Cardanoscan: https://preview.cardanoscan.io/transaction/beefcaffee...?tab=contracts\n")),(0,r.kt)("h2",{id:"return-the-tada"},"Return the ",(0,r.kt)("inlineCode",{parentName:"h2"},"tADA")),(0,r.kt)("p",null,"When you are done playing the testnet be sure to return your ",(0,r.kt)("inlineCode",{parentName:"p"},"tADA")," to the faucet."),(0,r.kt)("p",null,"Here, as a bonus you can build the transaction yourself!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const returnTADA = txBuilder.buildSync({\n    inputs: \n        (await koios.address.utxos("<paste your address here>"))\n        .map( utxo => ({ utxo }) ) // wrap in the expected input format\n    // the faucet address\n    changeAddress: "addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3"\n})\n')))}h.isMDXComponent=!0}}]);