"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[2100],{62848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=t(17624),i=t(4552);const r={sidebar_position:20},o="PDrep",c={id:"onchain/API/types/V3/Governance/PDrep",title:"PDrep",description:"Introduced in V3 version",source:"@site/docs/onchain/API/types/V3/Governance/PDrep.mdx",sourceDirName:"onchain/API/types/V3/Governance",slug:"/onchain/API/types/V3/Governance/PDrep",permalink:"/onchain/API/types/V3/Governance/PDrep",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/API/types/V3/Governance/PDrep.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"PChangedParams",permalink:"/onchain/API/types/V3/Governance/PChangedParams"},next:{title:"PGovernanceAction",permalink:"/onchain/API/types/V3/Governance/PGovernanceAction"}},a={},d=[{value:"<code>DRep</code>",id:"drep",level:2},{value:"<code>credentials</code>",id:"credentials",level:3},{value:"<code>AlwaysAbstain</code>",id:"alwaysabstain",level:2},{value:"<code>AlwaysNoConfidence</code>",id:"alwaysnoconfidence",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"pdrep",children:(0,s.jsx)(n.code,{children:"PDrep"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Introduced in V3 version"})}),"\n",(0,s.jsx)(n.p,{children:"This type represents different kinds of decentralized representatives (DReps) within Cardano's governance model.\nThis structure is part of the system that allows participants to express preferences on proposals, delegating their voting power to different types of DReps."}),"\n",(0,s.jsx)(n.p,{children:"Definition:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { pstruct } from "../../../PTypes/PStruct/pstruct";\nimport { PCredential } from "../../V1/Address/PCredential";\n\nexport const PDrep = pstruct({\n    DRep: { credentials: PCredential.type },\n    AlwaysAbstain: {},\n    AlwaysNoConfidence: {}\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"drep",children:(0,s.jsx)(n.code,{children:"DRep"})}),"\n",(0,s.jsx)(n.p,{children:"A representative with specific credentials."}),"\n",(0,s.jsx)(n.h3,{id:"credentials",children:(0,s.jsx)(n.code,{children:"credentials"})}),"\n",(0,s.jsx)(n.p,{children:"This field identifies the DRep either by public key hash or a script hash."}),"\n",(0,s.jsxs)(n.p,{children:["type: ",(0,s.jsx)(n.a,{href:"../../V1/Address/PCredential",children:"'PCredential.type'"})]}),"\n",(0,s.jsx)(n.h2,{id:"alwaysabstain",children:(0,s.jsx)(n.code,{children:"AlwaysAbstain"})}),"\n",(0,s.jsx)(n.p,{children:"A DRep that always abstains from voting."}),"\n",(0,s.jsx)(n.h2,{id:"alwaysnoconfidence",children:(0,s.jsx)(n.code,{children:"AlwaysNoConfidence"})}),"\n",(0,s.jsx)(n.p,{children:"A DRep that always votes with 'no confidence'"})]})}function l(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>o});var s=t(11504);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);