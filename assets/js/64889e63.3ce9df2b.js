"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[8154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="precursive",s={unversionedId:"onchain/Control Flow/precursive",id:"onchain/Control Flow/precursive",title:"precursive",description:"The other thing we are missing to have a proper language is some way to repeat the execution of some code.",source:"@site/docs/onchain/Control Flow/precursive.mdx",sourceDirName:"onchain/Control Flow",slug:"/onchain/Control Flow/precursive",permalink:"/docs/onchain/Control Flow/precursive",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Control Flow/precursive.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"pmatch",permalink:"/docs/onchain/Control Flow/pmatch"},next:{title:"Evaluation and testing",permalink:"/docs/category/evaluation-and-testing"}},l={},p=[],c={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"precursive"},(0,a.kt)("inlineCode",{parentName:"h1"},"precursive")),(0,a.kt)("p",null,"The other thing we are missing to have a proper language is some way to repeat the execution of some code."),(0,a.kt)("p",null,"The functional paradigm doesn't really like things like the loops we have in Typescript but that is not a big deal, because we can use recursive functions instead."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Wait a second!")," "),(0,a.kt)("p",{parentName:"blockquote"},"Don't we need to reference the same function we are defining in order to make it recursive?"),(0,a.kt)("p",{parentName:"blockquote"},"How do we do that if we need what we are defining while defining it?")),(0,a.kt)("p",null,"Turns out someone else already came up with a solution for that so that we don't have to."),(0,a.kt)("p",null,"That solution is the ",(0,a.kt)("strong",{parentName:"p"},"Y combinator")," (actually we'll use the ",(0,a.kt)("em",{parentName:"p"},"Z combinator")," but whatever)."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We'll not go in the details on how it works, but if you are a curious one here's a great article that explains the ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/swlh/y-and-z-combinators-in-javascript-lambda-calculus-with-real-code-31f25be934ec"},"Y combinator in javascript terms"))),(0,a.kt)("p",null,"All you need to know is that it allows functions to have themselves as parameters, and this solves everything!"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," there is a special typescript function that makes ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," functions recursive, and it's named, you guessed it, ",(0,a.kt)("inlineCode",{parentName:"p"},"precursive"),"."),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"precursive")," requires to make a ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," function recursive is that we pass the function as the first parameter, and then we can do whatever we want with it."),(0,a.kt)("p",null,"So let's try to define a ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," function that caluclates the factorial of a positive number:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const pfactorial = precursive(\n    pfn([\n        // remember that the first argument is the function itself?\n        // for this reason as first type we specify\n        // what will be the final type of the function\n        // because what we have here IS the function itself\n        // highlight-next-line\n        lam( int, int ),\n        int\n    ],  int)\n    (( self, n ) =>\n        pif( int ).$(\n            n.ltEq( 1 )\n        )\n        .then( 1 )\n        .else(\n            // highlight-start\n            // here we are applying this same function\n            // this is the equivalent of writing \n            // `pfactorial.$( n.sub( 1 ) )`\n            self.$( n.sub( 1 ) )\n            // highlight-end\n            .mult( n )\n        )\n    )\n)\n")),(0,a.kt)("p",null,"Now we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"pfactorial")," just like a normal function; this is because ",(0,a.kt)("inlineCode",{parentName:"p"},"precursive")," takes care of passing the first argument, so that the actual type of ",(0,a.kt)("inlineCode",{parentName:"p"},"pfactorial")," is just ",(0,a.kt)("inlineCode",{parentName:"p"},"lam( int, int )")),(0,a.kt)("p",null,"The next step is to learn how to ",(0,a.kt)("a",{parentName:"p",href:"../Evaluating%20and%20testing/evaluation"},"evaluate expressions")," so that we can be sure that ",(0,a.kt)("inlineCode",{parentName:"p"},"pfactorial")," is working as we expect."))}h.isMDXComponent=!0}}]);