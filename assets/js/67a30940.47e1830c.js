"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[7319],{95956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var s=t(17624),i=t(4552);const o={sidebar_position:1},c="plam and pfn",l={id:"onchain/Values/Functions/plam_and_pfn",title:"plam and pfn",description:"Functions can be transformed from the Typescript world to the plu-ts one just like any other value.",source:"@site/docs/onchain/Values/Functions/plam_and_pfn.mdx",sourceDirName:"onchain/Values/Functions",slug:"/onchain/Values/Functions/plam_and_pfn",permalink:"/onchain/Values/Functions/plam_and_pfn",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/Values/Functions/plam_and_pfn.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/category/functions"},next:{title:"Function application",permalink:"/onchain/Values/Functions/Function_appliaciton"}},r={},a=[{value:"<code>plam</code>",id:"plam",level:2},{value:"<code>pfn</code>",id:"pfn",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"plam-and-pfn",children:[(0,s.jsx)(n.code,{children:"plam"})," and ",(0,s.jsx)(n.code,{children:"pfn"})]}),"\n",(0,s.jsxs)(n.p,{children:["Functions can be transformed from the Typescript world to the ",(0,s.jsx)(n.code,{children:"plu-ts"})," one just like any other value."]}),"\n",(0,s.jsx)(n.p,{children:"This can be done with two functions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"plam"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pfn"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"plam",children:(0,s.jsx)(n.code,{children:"plam"})}),"\n",(0,s.jsxs)(n.p,{children:["Just like the ",(0,s.jsx)(n.code,{children:"lam"})," type, ",(0,s.jsx)(n.code,{children:"plam"})," only works for functions with one input; don't worry, ",(0,s.jsx)(n.code,{children:"pfn"})," is more powerful, but ",(0,s.jsx)(n.code,{children:"plam"})," will help us understand the basics."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"plam"})," signature is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function plam<A extends TermType, B extends TermType >( inputType: A, outputType: B )\n    : ( termFunc : ( input: Term<ToPType<A>> ) => Term<ToPType<B>> ) => Term<PLam<ToPType<A>,ToPType<B>>>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If this seems familiar it's because it works on the same principle of ",(0,s.jsx)(n.code,{children:"pList"})," we saw in the explanation of ",(0,s.jsx)(n.a,{href:"../Simple%20Values",children:"simple values"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"plam"})," first requires us to specify the ",(0,s.jsx)(n.code,{children:"plu-ts"})," types we are working with and it gives back a function ad-hoc for those types."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const makeLambdaFromIntToBool\n    : ( tellMeHow: ( int: Term<PInt> ) => Term<PBool> ) => Term<PLam<PInt, PBool>> = \n    plam( int, bool )\n"})}),"\n",(0,s.jsx)(n.p,{children:'The function we get back expects a typescript function as input that describe how to "transform" the input to the output.'}),"\n",(0,s.jsxs)(n.p,{children:["Since the ",(0,s.jsx)(n.code,{children:"tellMeHow"}),' function should return a Term; we need some way to "build" a new term.']}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"plu-ts"})," you ",(0,s.jsx)(n.em,{children:"never"})," need to write anything like ",(0,s.jsx)(n.code,{children:"new Term(...)"}),"; rather you use ",(0,s.jsx)(n.code,{children:"plu-ts"})," functions to build new ",(0,s.jsx)(n.code,{children:"plu-ts"})," terms."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Wait what?"})," Aren't ",(0,s.jsx)(n.code,{children:"plu-ts"})," functions also Terms? How do I build new Terms if I need other Terms to build new Terms?"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Fortunately for us there are some ",(0,s.jsx)(n.a,{href:"./builtins",children:"builtin functions"})," that form the fundamentals of the language."]}),"\n",(0,s.jsx)(n.p,{children:"We can use these to describe the body of our lambda."}),"\n",(0,s.jsxs)(n.p,{children:["these builtins will often be aviable directly on our ",(0,s.jsx)(n.code,{children:"Term"}),", as in the example below"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const pintIsZero = makeLambdaFromIntToBool(\n    someInt => peqInt.$( someInt ).$( 0 )\n);\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:[(0,s.jsx)(n.code,{children:"p<Stuff>"})," convention"]}),(0,s.jsxs)(n.p,{children:["is convention to name ",(0,s.jsx)(n.code,{children:"plu-ts"}),' functions starting with a lower case "p"; indicating that we are in the ',(0,s.jsx)(n.code,{children:"plu-ts"})," world and not the typescript one"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Here we are using the ",(0,s.jsx)(n.code,{children:"peqInt"})," builtin function; the ",(0,s.jsx)(n.code,{children:"$"})," method is a short form for the ",(0,s.jsxs)(n.a,{href:"./Function_appliaciton",children:[(0,s.jsx)(n.code,{children:"papp"})," function"]})," and is how we pass arguments to a ",(0,s.jsx)(n.code,{children:"plu-ts"})," function (we'll cover function application in the very next section)."]}),"\n",(0,s.jsxs)(n.p,{children:["What matters for now is that we succesfully transformed an ",(0,s.jsx)(n.code,{children:"int"})," into a ",(0,s.jsx)(n.code,{children:"bool"})," using only ",(0,s.jsx)(n.code,{children:"plu-ts"}),"; and we now have a new function that we can re-use when needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pintIsZero.$( pInt(42) ) // this is a Term<PBool> equivalent to `pBool( false )`\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pfn",children:(0,s.jsx)(n.code,{children:"pfn"})}),"\n",(0,s.jsxs)(n.p,{children:["Now that we know how the ",(0,s.jsx)(n.code,{children:"plam"})," machinery works let's look at the more useful ",(0,s.jsx)(n.code,{children:"pfn"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The signature (a bit simplified; this is not Typescript) is"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function pfn<InputsTypes extends [ TermType, ...TermType[] ], OutputType extends TermType>( inputsTypes: InputsTypes, outputType: OutputType )\n    : ( termFunction: ( ...inptus: PInputs ) => POutput ) => \n        Term<PFn<PInputs, POutput>>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and with the exception of an array of types as input rather than a single type we see it is doing the exact same thing as ",(0,s.jsx)(n.code,{children:"plam"})," but with more inputs."]}),"\n",(0,s.jsxs)(n.p,{children:["So if we want a function that builds a ",(0,s.jsx)(n.code,{children:"plu-ts"})," level function for us of type ",(0,s.jsx)(n.code,{children:"int -> int -> list( int )"})," we just write"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const makeListFromTwoInts = pfn( [ int, int ], list( int ) );\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and just like the ",(0,s.jsx)(n.code,{children:"plam"})," case, we use the function we just got to build a ",(0,s.jsx)(n.code,{children:"plu-ts"})," one."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const pTwoIntegersList = makeListFromTwoInts(\n    ( int1, int2 ) => pList([ int1, int2 ])\n);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>c});var s=t(11504);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);