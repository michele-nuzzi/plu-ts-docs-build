"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(f,l(l({ref:t},s),{},{components:n})):a.createElement(f,l({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l=void 0,o={unversionedId:"offchain/TxBuilder API/build interface",id:"offchain/TxBuilder API/build interface",title:"build interface",description:"ITxBuildArgs",source:"@site/docs/offchain/TxBuilder API/build interface.mdx",sourceDirName:"offchain/TxBuilder API",slug:"/offchain/TxBuilder API/build interface",permalink:"/docs/offchain/TxBuilder API/build interface",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/offchain/TxBuilder API/build interface.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TxBuilder",permalink:"/docs/offchain/TxBuilder API/TxBuilder"},next:{title:"Ledger Types",permalink:"/docs/offchain/Ledger Types"}},d={},p=[{value:"<code>ITxBuildArgs</code>",id:"itxbuildargs",level:2},{value:"<code>inputs</code>",id:"inputs",level:3},{value:"<code>changeAddress</code>",id:"changeaddress",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>readonlyRefInputs</code>",id:"readonlyrefinputs",level:3},{value:"<code>requiredSigners</code>",id:"requiredsigners",level:3},{value:"<code>collaterals</code>",id:"collaterals",level:3},{value:"<code>collateralReturn</code>",id:"collateralreturn",level:3},{value:"<code>mints</code>",id:"mints",level:3},{value:"<code>invalidBefore</code>",id:"invalidbefore",level:3},{value:"<code>invalidAfter</code>",id:"invalidafter",level:3},{value:"<code>certificates</code>",id:"certificates",level:3},{value:"<code>certificates</code>",id:"certificates-1",level:3},{value:"<code>metadata</code>",id:"metadata",level:3},{value:"<code>protocolUpdateProposal</code>",id:"protocolupdateproposal",level:3}],s={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"itxbuildargs"},(0,r.kt)("inlineCode",{parentName:"h2"},"ITxBuildArgs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ITxBuildArgs {\n    inputs: [ ITxBuildInput, ...ITxBuildInput[] ],\n    changeAddress: Address | AddressStr,\n    outputs?: ITxBuildOutput[],\n    readonlyRefInputs?: UTxO[],\n    requiredSigners?: PubKeyHash[],\n    collaterals?: UTxO[],\n    collateralReturn?: ITxBuildOutput,\n    mints?: ITxBuildMint[],\n    invalidBefore?: CanBeUInteger,\n    invalidAfter?: CanBeUInteger,\n    certificates?: ITxBuildCert[],\n    withdrawals?: ITxBuildWithdrawal[],\n    metadata?: TxMetadata,\n    protocolUpdateProposal?: ProtocolUpdateProposal\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ITxBuildArgs")," is the interface that is used by ",(0,r.kt)("inlineCode",{parentName:"p"},"txBuilder.buildSync")," to understand how to build a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tx"),"."),(0,r.kt)("p",null,"I requres you to pass a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs")," and to specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"changeAddress")," (needed for automatic fee calculation)."),(0,r.kt)("p",null,"all the remaining fields are optional."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"optional ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"outputs")),(0,r.kt)("p",{parentName:"admonition"},"the ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," is optional too"),(0,r.kt)("p",{parentName:"admonition"},"if no ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," are specified all the input value is sent back to ",(0,r.kt)("inlineCode",{parentName:"p"},"changeAddress"))),(0,r.kt)("h3",{id:"inputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"inputs")),(0,r.kt)("p",null,"an input is described using ",(0,r.kt)("inlineCode",{parentName:"p"},"ITxBuildInput")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface ITxBuildInput {\n    utxo: UTxO,\n    referenceScriptV2?: {\n        refUtxo: UTxO,\n        datum: CanBeData | "inline",\n        redeemer: CanBeData,\n    }\n    inputScript?: {\n        script: Script,\n        datum: CanBeData | "inline",\n        redeemer: CanBeData\n    }\n}\n')),(0,r.kt)("p",null,"it requires an ",(0,r.kt)("inlineCode",{parentName:"p"},"UTxO")," and optionally a reference utxo with a reference script (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0033"},"CIP-0033"),") attached or a ",(0,r.kt)("inlineCode",{parentName:"p"},"Script")," to include in the transaction in Plutus V1 style."),(0,r.kt)("p",null,"both the ways of including a ",(0,r.kt)("inlineCode",{parentName:"p"},"Script")," (either by reference of in V1 style)\nwill require you to specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"redeemer")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"datum")),(0,r.kt)("p",null,"if the ",(0,r.kt)("inlineCode",{parentName:"p"},"datum")," is already present on the input ",(0,r.kt)("inlineCode",{parentName:"p"},"UTxO")," (the one of the mandatory ",(0,r.kt)("inlineCode",{parentName:"p"},"utxo")," field) the ",(0,r.kt)("inlineCode",{parentName:"p"},"datum")," vaue should be the string ",(0,r.kt)("inlineCode",{parentName:"p"},'"inline"')," (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0032"},"CIP-0032"),")"),(0,r.kt)("h3",{id:"changeaddress"},(0,r.kt)("inlineCode",{parentName:"h3"},"changeAddress")),(0,r.kt)("p",null,"an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," or a bech32 encoded address (starting with ",(0,r.kt)("inlineCode",{parentName:"p"},'"addr1"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"addr_test1"')," if in testnet);"),(0,r.kt)("p",null,"will add an output to the specified address (in the ",(0,r.kt)("strong",{parentName:"p"},"last")," position in tx outputs ordering)."),(0,r.kt)("h3",{id:"outputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,r.kt)("p",null,"an output is described using ",(0,r.kt)("inlineCode",{parentName:"p"},"ITxBuildOutput")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ITxBuildOutput {\n    address: Address,\n    value: Value,\n    datum?: Hash32 | CanBeData\n    refScript?: Script\n}\n")),(0,r.kt)("p",null,"it requires an ",(0,r.kt)("inlineCode",{parentName:"p"},"Address")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Value"),";"),(0,r.kt)("p",null,"optionally a ",(0,r.kt)("inlineCode",{parentName:"p"},"datum")," which can be either an ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash32"),", anything ",(0,r.kt)("inlineCode",{parentName:"p"},"Data"),"-like. or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("p",null,"if ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," no datum is attached.\nif instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash32")," the hash is attached in Plutus V1 style\nif anything ",(0,r.kt)("inlineCode",{parentName:"p"},"Data"),"-like an ",(0,r.kt)("strong",{parentName:"p"},"inline")," datum is attached (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0032"},"CIP-0032"),")"),(0,r.kt)("p",null,"and the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"refScript")),(0,r.kt)("p",null,"if ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," no script is attached.\nif instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Script"),", the script is attached to the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"UTxO")," (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0033"},"CIP-0033"),")"),(0,r.kt)("h3",{id:"readonlyrefinputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"readonlyRefInputs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"UTxO[]\n")),(0,r.kt)("p",null,"any addtional reference inputs ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cardano-foundation/CIPs/tree/master/CIP-0031"},"CIP-0031")),(0,r.kt)("h3",{id:"requiredsigners"},(0,r.kt)("inlineCode",{parentName:"h3"},"requiredSigners")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"PubKeyHash[]\n")),(0,r.kt)("p",null,"set of signers required by the transaction."),(0,r.kt)("p",null,"this field is the one esposed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScriptContext")," of a smart contract"),(0,r.kt)("h3",{id:"collaterals"},(0,r.kt)("inlineCode",{parentName:"h3"},"collaterals")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"UTxO[]\n")),(0,r.kt)("p",null,"collateral inputs needed for smart contract validation."),(0,r.kt)("h3",{id:"collateralreturn"},(0,r.kt)("inlineCode",{parentName:"h3"},"collateralReturn")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"ITxBuildOutput[]\n")),(0,r.kt)("p",null,"outputs specifying the return value from ",(0,r.kt)("inlineCode",{parentName:"p"},"collaterals")),(0,r.kt)("h3",{id:"mints"},(0,r.kt)("inlineCode",{parentName:"h3"},"mints")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ITxBuildMint {\n    value: Value\n    script: {\n        inline: Script\n        policyId: Hash32\n        redeemer: CanBeData\n    } | {\n        ref: UTxO\n        policyId: Hash32\n        redeemer: CanBeData\n    }\n}\n")),(0,r.kt)("p",null,"array of tokens to be minted or burned and respective minting policies."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"value")," MUST have a single entry")),(0,r.kt)("h3",{id:"invalidbefore"},(0,r.kt)("inlineCode",{parentName:"h3"},"invalidBefore")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type CanBeUInteger = number | bigint\n")),(0,r.kt)("p",null,"the slot number after wich the transaction can be submited."),(0,r.kt)("h3",{id:"invalidafter"},(0,r.kt)("inlineCode",{parentName:"h3"},"invalidAfter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type CanBeUInteger = number | bigint\n")),(0,r.kt)("p",null,"the slot number after wich the transaction can is rejected."),(0,r.kt)("h3",{id:"certificates"},(0,r.kt)("inlineCode",{parentName:"h3"},"certificates")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ITxBuildCert {\n    cert: AnyCertificate\n    script?: {\n        inline: Script\n        redeemer: CanBeData\n    } | {\n        ref: UTxO\n        redeemer: CanBeData\n    }\n}\n")),(0,r.kt)("p",null,"array of certificates to include in the transaction and respective (optional) stake validator scripts"),(0,r.kt)("h3",{id:"certificates-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"certificates")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface interface ITxBuildWithdrawal {\n    withdrawal: {\n        rewardAccount: Hash28 | StakeAddress,\n        amount: Coin\n    },\n    script?: {\n        inline: Script\n        redeemer: CanBeData\n    } | {\n        ref: UTxO\n        redeemer: CanBeData\n    }\n}\n")),(0,r.kt)("p",null,"array of withdrawals to include in the transaction and respective (optional) stake validator scripts"),(0,r.kt)("h3",{id:"metadata"},(0,r.kt)("inlineCode",{parentName:"h3"},"metadata")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ITxMetadata = {\n    [metadatum_label: number | string]: TxMetadatum \n}\n\nclass TxMetadata\n{\n    constructor(metadata: ITxMetadata)\n    {\n        // ...\n    }\n}\n")),(0,r.kt)("p",null,"any metadata to  include in the transaction"),(0,r.kt)("h3",{id:"protocolupdateproposal"},(0,r.kt)("inlineCode",{parentName:"h3"},"protocolUpdateProposal")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ProtocolParametersUpdateMap = {\n    genesisHash: GenesisHash\n    changes: Partial<ProtocolParamters>\n}[]\n\ntype ProtocolUpdateProposal = [ ProtocolParametersUpdateMap, Epoch ];\n")),(0,r.kt)("p",null,"protocol update proposal to include in the transaciton."))}c.isMDXComponent=!0}}]);