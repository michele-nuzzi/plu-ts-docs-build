"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[4762],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9123:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="makeRedeemerValidator",l={unversionedId:"onchain/API/utilities/makeRedeemerValidator",id:"onchain/API/utilities/makeRedeemerValidator",title:"makeRedeemerValidator",description:"As said in [makeValidator], once on-chain contracts are not typed.",source:"@site/docs/onchain/API/utilities/makeRedeemerValidator.mdx",sourceDirName:"onchain/API/utilities",slug:"/onchain/API/utilities/makeRedeemerValidator",permalink:"/docs/onchain/API/utilities/makeRedeemerValidator",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/API/utilities/makeRedeemerValidator.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"makeValidator",permalink:"/docs/onchain/API/utilities/makeValidator"},next:{title:"Offchain",permalink:"/docs/category/offchain"}},c={},s=[{value:"errorMessage",id:"errormessage",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"makeredeemervalidator"},(0,a.kt)("inlineCode",{parentName:"h1"},"makeRedeemerValidator")),(0,a.kt)("p",null,"As said in ","[",(0,a.kt)("inlineCode",{parentName:"p"},"makeValidator"),"]",", once on-chain contracts are not typed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"makeRedeemerValidator")," is used for contract that do not expect a datum as first argument."),(0,a.kt)("p",null,"the type signature is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"port function makeRedeemerValidator(\n    typedValidator: Term<\n        PLam<\n            PType,\n            PLam<\n                typeof PScriptContext, \n                PBool\n            >\n        >\n    >,\n    errorMessage?: string\n): TermFn<[PData,PData], PUnit>\n\n")),(0,a.kt)("p",null,"as you can see it takes any typed validator and returns a generic untyped validator so that the node will be able to evaluate it correctly."),(0,a.kt)("h3",{id:"errormessage"},"errorMessage"),(0,a.kt)("p",null,"Optionally you can pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," that will be included in the on-chain script and passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"ptrace")," in case of failure"))}u.isMDXComponent=!0}}]);