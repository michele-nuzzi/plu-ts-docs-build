"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"plu-ts","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Getting Started","href":"/docs/Getting Started","docId":"Getting Started"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Hello plu-ts","href":"/docs/examples/Hello World","docId":"examples/Hello World"}],"href":"/docs/category/examples"},{"type":"category","label":"Onchain","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Concepts","href":"/docs/onchain/Concepts","docId":"onchain/Concepts"},{"type":"link","label":"Types","href":"/docs/onchain/Types","docId":"onchain/Types"},{"type":"category","label":"Values","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Simple values","href":"/docs/onchain/Values/Simple Values","docId":"onchain/Values/Simple Values"},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"plam and pfn","href":"/docs/onchain/Values/Functions/plam_and_pfn","docId":"onchain/Values/Functions/plam_and_pfn"},{"type":"link","label":"Function application","href":"/docs/onchain/Values/Functions/Function_appliaciton","docId":"onchain/Values/Functions/Function_appliaciton"},{"type":"link","label":"Partial function application","href":"/docs/onchain/Values/Functions/partial_function_app","docId":"onchain/Values/Functions/partial_function_app"},{"type":"link","label":"builtins","href":"/docs/onchain/Values/Functions/builtins","docId":"onchain/Values/Functions/builtins"}],"href":"/docs/category/functions"},{"type":"link","label":"Aliases","href":"/docs/onchain/Values/aliases","docId":"onchain/Values/aliases"},{"type":"category","label":"Structs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Struct definition","href":"/docs/onchain/Values/Structs/definition","docId":"onchain/Values/Structs/definition"},{"type":"link","label":"Generic Structs","href":"/docs/onchain/Values/Structs/generic_structs","docId":"onchain/Values/Structs/generic_structs"}],"href":"/docs/category/structs"},{"type":"link","label":"Methods of Terms","href":"/docs/onchain/Values/Methods of Terms","docId":"onchain/Values/Methods of Terms"}],"href":"/docs/category/values"},{"type":"category","label":"Control Flow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"if then else","href":"/docs/onchain/Control Flow/pif","docId":"onchain/Control Flow/pif"},{"type":"link","label":"pmatch","href":"/docs/onchain/Control Flow/pmatch","docId":"onchain/Control Flow/pmatch"},{"type":"link","label":"precursive","href":"/docs/onchain/Control Flow/precursive","docId":"onchain/Control Flow/precursive"}],"href":"/docs/category/control-flow"},{"type":"category","label":"Evaluation and testing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Term evaluation","href":"/docs/onchain/Evaluating and testing/evaluation","docId":"onchain/Evaluating and testing/evaluation"}],"href":"/docs/category/evaluation-and-testing"},{"type":"category","label":"Optimizations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"plet","href":"/docs/onchain/Optimizations/plet","docId":"onchain/Optimizations/plet"},{"type":"link","label":"phoist","href":"/docs/onchain/Optimizations/phoist","docId":"onchain/Optimizations/phoist"},{"type":"link","label":"pforce and pdelay","href":"/docs/onchain/Optimizations/pforce and pdelay","docId":"onchain/Optimizations/pforce and pdelay"}],"href":"/docs/category/optimizations"},{"type":"category","label":"stdlib","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"TermInt","href":"/docs/onchain/stdlib/TermInt","docId":"onchain/stdlib/TermInt"},{"type":"link","label":"TermBool","href":"/docs/onchain/stdlib/TermBool","docId":"onchain/stdlib/TermBool"},{"type":"link","label":"TermBS","href":"/docs/onchain/stdlib/TermBS","docId":"onchain/stdlib/TermBS"},{"type":"link","label":"TermStr","href":"/docs/onchain/stdlib/TermStr","docId":"onchain/stdlib/TermStr"},{"type":"link","label":"TermList<PElemsType>","href":"/docs/onchain/stdlib/TermList","docId":"onchain/stdlib/TermList"},{"type":"link","label":"TermPair<PFstT,PSndT>","href":"/docs/onchain/stdlib/TermPair","docId":"onchain/stdlib/TermPair"},{"type":"link","label":"TermFn<PIns[],POut>","href":"/docs/onchain/stdlib/TermFn<PIns,POut>","docId":"onchain/stdlib/TermFn<PIns,POut>"},{"type":"link","label":"TermStruct<StructDef>","href":"/docs/onchain/stdlib/TermStruct<StructDef>","docId":"onchain/stdlib/TermStruct<StructDef>"}],"href":"/docs/category/stdlib"}],"href":"/docs/category/onchain"},{"type":"category","label":"Offchain","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"TxBuilder API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"TxBuilder","href":"/docs/offchain/TxBuilder API/TxBuilder","docId":"offchain/TxBuilder API/TxBuilder"},{"type":"link","label":"build interface","href":"/docs/offchain/TxBuilder API/build interface","docId":"offchain/TxBuilder API/build interface"}],"href":"/docs/category/txbuilder-api"},{"type":"link","label":"Ledger Types","href":"/docs/offchain/Ledger Types","docId":"offchain/Ledger Types"}],"href":"/docs/category/offchain"},{"type":"category","label":"Tools","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"cardanocli-pluts","href":"/docs/tools/cardanocli-pluts","docId":"tools/cardanocli-pluts"},{"type":"link","label":"koios-pluts","href":"/docs/tools/koios-pluts","docId":"tools/koios-pluts"}],"href":"/docs/category/tools"}]},"docs":{"examples/Hello World":{"id":"examples/Hello World","title":"Hello plu-ts","description":"Write a smart contract in 5 minutes; deploy it in 10. Enjoy it forever.","sidebar":"tutorialSidebar"},"Getting Started":{"id":"Getting Started","title":"Getting Started","description":"Installation","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"plu-ts","description":"Built with \u2764\ufe0f by Harmonic Laboratories","sidebar":"tutorialSidebar"},"offchain/Ledger Types":{"id":"offchain/Ledger Types","title":"Ledger Types","description":"","sidebar":"tutorialSidebar"},"offchain/TxBuilder API/build interface":{"id":"offchain/TxBuilder API/build interface","title":"build interface","description":"ITxBuildArgs","sidebar":"tutorialSidebar"},"offchain/TxBuilder API/TxBuilder":{"id":"offchain/TxBuilder API/TxBuilder","title":"TxBuilder","description":"plu-ts/offchain exposes the TxBuilder class.","sidebar":"tutorialSidebar"},"onchain/Concepts":{"id":"onchain/Concepts","title":"Concepts","description":"Core concepts","sidebar":"tutorialSidebar"},"onchain/Control Flow/pif":{"id":"onchain/Control Flow/pif","title":"if then else","description":"As a solution to condtitional code execution plu-ts exposes an if then else construct.","sidebar":"tutorialSidebar"},"onchain/Control Flow/pmatch":{"id":"onchain/Control Flow/pmatch","title":"pmatch","description":"When we had our first look at the structs, we hinted at the possibility of custom control flows.","sidebar":"tutorialSidebar"},"onchain/Control Flow/precursive":{"id":"onchain/Control Flow/precursive","title":"precursive","description":"The other thing we are missing to have a proper language is some way to repeat the execution of some code.","sidebar":"tutorialSidebar"},"onchain/Evaluating and testing/evaluation":{"id":"onchain/Evaluating and testing/evaluation","title":"Term evaluation","description":"plu-ts implements its own version of the CEK machine for the UPLC language. This allows any plu-ts term to be compiled to an UPLC Term and evaluated.","sidebar":"tutorialSidebar"},"onchain/Optimizations/pforce and pdelay":{"id":"onchain/Optimizations/pforce and pdelay","title":"pforce and pdelay","description":"plet and phoist are the two main tools to use when focusing on optimizations;","sidebar":"tutorialSidebar"},"onchain/Optimizations/phoist":{"id":"onchain/Optimizations/phoist","title":"phoist","description":"Another great tool for optimizations is phoist and all hoisted terms.","sidebar":"tutorialSidebar"},"onchain/Optimizations/plet":{"id":"onchain/Optimizations/plet","title":"plet","description":"Up until this part of the documentation we wrote plu-ts code that didn\'t need to re-use values, but in a real case scenario that is quite common.","sidebar":"tutorialSidebar"},"onchain/stdlib/TermBool":{"id":"onchain/stdlib/TermBool","title":"TermBool","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermBS":{"id":"onchain/stdlib/TermBS","title":"TermBS","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermFn<PIns,POut>":{"id":"onchain/stdlib/TermFn<PIns,POut>","title":"TermFn<PIns[],POut>","description":"The type definition of TermFn is more complex than what it actually does; but that is only because it automatically handles functions with an unspecified (potentially infinite) number of parameters;","sidebar":"tutorialSidebar"},"onchain/stdlib/TermInt":{"id":"onchain/stdlib/TermInt","title":"TermInt","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermList":{"id":"onchain/stdlib/TermList","title":"TermList<PElemsType>","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermPair":{"id":"onchain/stdlib/TermPair","title":"TermPair<PFstT,PSndT>","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermStr":{"id":"onchain/stdlib/TermStr","title":"TermStr","description":"type definition:","sidebar":"tutorialSidebar"},"onchain/stdlib/TermStruct<StructDef>":{"id":"onchain/stdlib/TermStruct<StructDef>","title":"TermStruct<StructDef>","description":"TermStruct is an other type that is unnecessarely complicated.","sidebar":"tutorialSidebar"},"onchain/Types":{"id":"onchain/Types","title":"Types","description":"As we saw in Concepts plu-ts is an eDSL embedded in Typescript, as such we have two type systems; the Typescript one and the plu-ts one","sidebar":"tutorialSidebar"},"onchain/Values/aliases":{"id":"onchain/Values/aliases","title":"Aliases","description":"In some cases it might be useful to define aliases for already existing types.","sidebar":"tutorialSidebar"},"onchain/Values/Functions/builtins":{"id":"onchain/Values/Functions/builtins","title":"builtins","description":"Fortunately UPLC does have some basic functions that allow us to build more complex ones when needed.","sidebar":"tutorialSidebar"},"onchain/Values/Functions/Function_appliaciton":{"id":"onchain/Values/Functions/Function_appliaciton","title":"Function application","description":"Lambdas and functions in general in plu-ts are often just constants seen from the typescript world, however we usually know that what we have is more than just a constant and that it can take arguments.","sidebar":"tutorialSidebar"},"onchain/Values/Functions/partial_function_app":{"id":"onchain/Values/Functions/partial_function_app","title":"Partial function application","description":"When a plu-ts function takes more than one argument, like the pTwoIntegersList we built explaining pfn, it is possible to get new functions from the first by passing only some of the parameters.","sidebar":"tutorialSidebar"},"onchain/Values/Functions/plam_and_pfn":{"id":"onchain/Values/Functions/plam_and_pfn","title":"plam and pfn","description":"Functions can be transformed from the Typescript world to the plu-ts one just like any other value.","sidebar":"tutorialSidebar"},"onchain/Values/Methods of Terms":{"id":"onchain/Values/Methods of Terms","title":"Methods of Terms","description":"Like in the case of papp that is meant to work with a plu-ts function as the first argument, there are functions that are meant to work with specific types.","sidebar":"tutorialSidebar"},"onchain/Values/Simple Values":{"id":"onchain/Values/Simple Values","title":"Simple values","description":"For most of the types described there is a function to transform the Typescript version to the plu-ts equivalent.","sidebar":"tutorialSidebar"},"onchain/Values/Structs/definition":{"id":"onchain/Values/Structs/definition","title":"Struct definition","description":"When writing programs we often need to access data that is more articulate than simple integers or booleans; for this reason plu-ts allows ytou to define custom data-types.","sidebar":"tutorialSidebar"},"onchain/Values/Structs/generic_structs":{"id":"onchain/Values/Structs/generic_structs","title":"Generic Structs","description":"Sometimes it might be necessary to define custom types that are able to work with any other type; often acting as containers.","sidebar":"tutorialSidebar"},"tools/cardanocli-pluts":{"id":"tools/cardanocli-pluts","title":"cardanocli-pluts","description":"cardanocli-pluts","sidebar":"tutorialSidebar"},"tools/koios-pluts":{"id":"tools/koios-pluts","title":"koios-pluts","description":"koios-pluts","sidebar":"tutorialSidebar"}}}')}}]);