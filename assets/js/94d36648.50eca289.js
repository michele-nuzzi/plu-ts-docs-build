"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[4150],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},o="makeValidator",l={unversionedId:"onchain/API/utilities/makeValidator",id:"onchain/API/utilities/makeValidator",title:"makeValidator",description:"Once on-chain contracts are not typed. Instead they only receive generic data arguments.",source:"@site/docs/onchain/API/utilities/makeValidator.mdx",sourceDirName:"onchain/API/utilities",slug:"/onchain/API/utilities/makeValidator",permalink:"/docs/onchain/API/utilities/makeValidator",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/API/utilities/makeValidator.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"compile",permalink:"/docs/onchain/API/utilities/compile"},next:{title:"makeRedeemerValidator",permalink:"/docs/onchain/API/utilities/makeRedeemerValidator"}},s={},c=[{value:"errorMessage",id:"errormessage",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"makevalidator"},(0,r.kt)("inlineCode",{parentName:"h1"},"makeValidator")),(0,r.kt)("p",null,"Once on-chain contracts are not typed. Instead they only receive generic ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," arguments."),(0,r.kt)("p",null,"This is why ",(0,r.kt)("inlineCode",{parentName:"p"},"makeValidator")," exsists. "),(0,r.kt)("p",null,"the type signature is not too complicated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export function makeValidator(\n    typedValidator: Term<\n        PLam<\n            PType,\n            PLam<\n                PType,\n                PLam<\n                    typeof PScriptContext, \n                    PBool\n                >\n            >\n        >\n    >,\n    errorMessage?: string\n): TermFn<[PData,PData,PData], PUnit>\n\n")),(0,r.kt)("p",null,"as you can see it takes any typed validator and returns a generic untyped validator so that the node will be able to evaluate it correctly."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"use ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"makeValidator")," only for spending scripts"),(0,r.kt)("p",{parentName:"admonition"},"as you can see; ",(0,r.kt)("inlineCode",{parentName:"p"},"makeValidator")," expects a contract with 3 arguments."),(0,r.kt)("p",{parentName:"admonition"},"this means it can only be used for contracts with ",(0,r.kt)("inlineCode",{parentName:"p"},"Spending")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"PScriptPurpose")),(0,r.kt)("p",{parentName:"admonition"},"for all other purposes you likely want to use ",(0,r.kt)("a",{parentName:"p",href:"./makeRedeemerValidator"},(0,r.kt)("inlineCode",{parentName:"a"},"makeRedeemerValidator")))),(0,r.kt)("h3",{id:"errormessage"},"errorMessage"),(0,r.kt)("p",null,"Optionally you can pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," that will be included in the on-chain script and passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"ptrace")," in case of failure"))}m.isMDXComponent=!0}}]);