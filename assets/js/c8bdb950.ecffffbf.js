"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5320],{44524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=n(17624),s=n(4552);const i={sidebar_position:1},a="pmatch",r={id:"onchain/Control Flow/pmatch",title:"pmatch",description:"When we had our first look at the structs, we hinted at the possibility of custom control flows.",source:"@site/docs/onchain/Control Flow/pmatch.mdx",sourceDirName:"onchain/Control Flow",slug:"/onchain/Control Flow/pmatch",permalink:"/onchain/Control Flow/pmatch",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/onchain/Control Flow/pmatch.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"if then else",permalink:"/onchain/Control Flow/pif"},next:{title:"precursive",permalink:"/onchain/Control Flow/precursive"}},c={},l=[{value:"The underscore (<code>_</code>) wildcard",id:"the-underscore-_-wildcard",level:2},{value:"Inline dot notation",id:"inline-dot-notation",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"pmatch",children:(0,o.jsx)(t.code,{children:"pmatch"})}),"\n",(0,o.jsxs)(t.p,{children:["When we had our first look at the ",(0,o.jsx)(t.a,{href:"../Values/Structs/definition",children:"structs"}),", we hinted at the possibility of ",(0,o.jsx)(t.em,{children:"custom control flows"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["These are possible thanks to the ",(0,o.jsx)(t.code,{children:"pmatch"})," construct."]}),"\n",(0,o.jsxs)(t.p,{children:["To understand why this is extremely useful, let's take our ",(0,o.jsx)(t.code,{children:"Toy"})," struct we defined looking at ",(0,o.jsx)(t.code,{children:"pstruct"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const Toy = pstruct({\n    Stick: {},\n    Ball: {\n        size: int,\n        isSoft: bool\n    },\n    Mailman: {\n        name: str,\n        age: Age.type\n    }\n})\n"})}),"\n",(0,o.jsx)(t.p,{children:"And let's say we want to have a function that extracts the name of the mailman our dog plays with when we're out. It would look something like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'const getMailmanName = plam( Toy.type, str )\n( toy =>\n    pmatch( toy )\n    .onMailman( mailman => mailman.name )\n    .onStick( _ => pStr("") )\n    .onBall(  _ => pStr("") )\n)\n'})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"pmatch"})," is taking a struct ",(0,o.jsx)(t.code,{children:"Term"})," and returns a Typescript object with all the names of possible constructors that struct has, based on its definition."]}),"\n",(0,o.jsx)(t.p,{children:"It then executes the branch based on the constructor used to get the struct instance."}),"\n",(0,o.jsxs)(t.p,{children:["A ",(0,o.jsx)(t.code,{children:"pmatch"})," branch gets as input the instance of the struct with all fields aviable trough dot notation."]}),"\n",(0,o.jsxs)(t.p,{children:["This way the defined function returns the name of the mailman if the Toy was actually constructed using the ",(0,o.jsx)(t.code,{children:"Mailman"})," constructor; otherwise it returns an empty string."]}),"\n",(0,o.jsxs)(t.h2,{id:"the-underscore-_-wildcard",children:["The underscore (",(0,o.jsx)(t.code,{children:"_"}),") wildcard"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"pmatch"})," will force you to cover the cases for all constructors; but many times we only want to do something if the struct was built using one specific constructor without regard for any other constructors."]}),"\n",(0,o.jsxs)(t.p,{children:["In fact we found ourselves in a very similar case in the example above: we want to do something only in the ",(0,o.jsx)(t.code,{children:"Mailman"})," case but not in the others."]}),"\n",(0,o.jsxs)(t.p,{children:["For situations like these there is the underscore (",(0,o.jsx)(t.code,{children:"_"}),") wildcard, that allows us to rewrite our function as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'const getMailmanName = plam( Toy.type, str )\n( toy =>\n    pmatch( toy )\n    .onMailman( mailman => mailman.name )\n    ._( _ => pStr("") )\n)\n'})}),"\n",(0,o.jsx)(t.p,{children:"This not only makes the code more readable but in the vast majority of the cases it also makes it more efficient!"}),"\n",(0,o.jsx)(t.h2,{id:"inline-dot-notation",children:"Inline dot notation"}),"\n",(0,o.jsx)(t.p,{children:"Now that we have a way to extract the name of the mailman from a Toy, we need to pass the actual toy to the function we just defined."}),"\n",(0,o.jsxs)(t.p,{children:["Using the ",(0,o.jsx)(t.code,{children:"pmatch"})," function, our code would look like this:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// remember the definition of `Dog`\nconst Dog = pstruct({\n    Dog: {\n        name: str,\n        age: Age.type,\n        favouriteToy: Toy.type\n    }\n});\n\nconst getMailmanNameFromDog = plam( Dog.type, str )\n( dog =>\n    pmatch( dog )\n    .onDog( dogInstance =>\n        getMailmanName.$( dogInstance.favouriteToy )\n    )\n)\n"})}),"\n",(0,o.jsx)(t.p,{children:"This works just fine but is a lot of code just to get a field of a constructor we know is unique."}),"\n",(0,o.jsx)(t.p,{children:"Fortunately for us, if the struct definition has only one possible constructor,\nthis struct term directly exposes the fields; so that we can threat it as a normal javascript object"}),"\n",(0,o.jsx)(t.p,{children:"This allows us to rewrite the function as"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const getMailmanNameFromDog = plam( Dog.type, str )\n( dog => \n    getMailmanName.$( dog.favouriteToy )\n)\n"})}),"\n",(0,o.jsx)(t.p,{children:"which is a lot cleaner!"})]})}function d(e={}){const{wrapper:t}={...(0,s.M)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>r,M:()=>a});var o=n(11504);const s={},i=o.createContext(s);function a(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);