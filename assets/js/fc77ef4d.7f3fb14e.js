"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[6872],{60920:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var s=t(17624),i=t(4552),r=t(24932),a=t(44056);const c={sidebar_position:1},l="Vesting",d={id:"examples/Vesting",title:"Vesting",description:"Now that we are a bit more famliar on how to interact properly with a smart contract",source:"@site/docs/examples/Vesting.mdx",sourceDirName:"examples",slug:"/examples/Vesting",permalink:"/examples/Vesting",draft:!1,unlisted:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts-docs/docs/examples/Vesting.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hello plu-ts",permalink:"/examples/Hello World"},next:{title:"Onchain",permalink:"/category/onchain"}},o={},h=[{value:"Project set up",id:"project-set-up",level:2},{value:"Add dependencies",id:"add-dependencies",level:2},{value:"Template overview",id:"template-overview",level:3},{value:"run the template",id:"run-the-template",level:3},{value:"The contract",id:"the-contract",level:2},{value:"<code>VestingDatum</code>",id:"vestingdatum",level:3},{value:"contract signature",id:"contract-signature",level:3},{value:"contract logic",id:"contract-logic",level:3},{value:"<code>signedByBeneficiary</code>",id:"signedbybeneficiary",level:2},{value:"<code>deadlineReached</code>",id:"deadlinereached",level:2},{value:"compiling the contract",id:"compiling-the-contract",level:2},{value:"Interacting with the contract",id:"interacting-with-the-contract",level:2},{value:"setup the <code>cli</code> object",id:"setup-the-cli-object",level:2},{value:"save the script",id:"save-the-script",level:3},{value:"get some keys",id:"get-some-keys",level:3},{value:"create a vesting utxo",id:"create-a-vesting-utxo",level:2},{value:"read the script",id:"read-the-script",level:3},{value:"get your address",id:"get-your-address",level:3},{value:"query the address utxos",id:"query-the-address-utxos",level:3},{value:"build the transaciton",id:"build-the-transaciton",level:3},{value:"sign and submit",id:"sign-and-submit",level:3},{value:"spend the locked utxo",id:"spend-the-locked-utxo",level:2},{value:"get all you need",id:"get-all-you-need",level:3},{value:"build the transaciton",id:"build-the-transaciton-1",level:3},{value:"Bonus: return the tADA",id:"bonus-return-the-tada",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"vesting",children:"Vesting"}),"\n",(0,s.jsx)(n.p,{children:"Now that we are a bit more famliar on how to interact properly with a smart contract\nlet's do a step forward and see if we can come up with a sligthly more complex contract."}),"\n",(0,s.jsxs)(n.p,{children:["The final result can be found at ",(0,s.jsx)(n.a,{href:"https://github.com/HarmonicLabs/vesting-pluts",children:(0,s.jsx)(n.code,{children:"HarmonicLabs/vesting-pluts"})})]}),"\n",(0,s.jsx)(n.h2,{id:"project-set-up",children:"Project set up"}),"\n",(0,s.jsxs)(n.p,{children:["We will once again start from the ",(0,s.jsx)(n.a,{href:"https://github.com/HarmonicLabs/plu-ts-starter",children:(0,s.jsx)(n.code,{children:"plu-ts-starter"})})," template:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/HarmonicLabs/plu-ts-starter.git\nmv plu-ts-starter vesting-pluts\ncd vesting-pluts\ngit remote remove origin\n"})}),"\n",(0,s.jsx)(n.p,{children:"this gives us a simple project structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./vesting-pluts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 Introduction\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 contract.ts\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 MyDatum\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 MyRedeemer\n\u2502       \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,s.jsx)(n.h2,{id:"add-dependencies",children:"Add dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["Just like the ",(0,s.jsx)(n.a,{href:"./Hello%20World",children:"Hello plu-ts"})," example; this project already comes with plu-ts as dependecy;\nall we need to do to then is to run"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install\n"})}),"\n",(0,s.jsxs)(n.p,{children:["to make things easier this time we'll assume to be working on a server environment;\nso we'll use ",(0,s.jsx)(n.a,{href:"https://github.com/HarmonicLabs/cardanocli-pluts",children:(0,s.jsx)(n.code,{children:"cardanocli-pluts"})})," in order to submit transacitons."]}),"\n",(0,s.jsx)(n.p,{children:"to install it just run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @harmoniclabs/cardanocli-pluts\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.code,{children:"cardano-cli"})}),(0,s.jsxs)(n.p,{children:["In order to use ",(0,s.jsx)(n.code,{children:"cardano-cli"})," properly you need to have a ",(0,s.jsx)(n.code,{children:"cardano-node"})," running"]}),(0,s.jsxs)(n.p,{children:["you can install ",(0,s.jsx)(n.code,{children:"cardano-node"})," and ",(0,s.jsx)(n.code,{children:"cardano-cli"})," either form source or using the precompiled binaries from IOG"]}),(0,s.jsxs)(r.c,{children:[(0,s.jsxs)(a.c,{value:"From source",label:"From source",default:!0,children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"first lone the repository"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/input-output-hk/cardano-node.git\n"})}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["make sure to have ",(0,s.jsx)(n.code,{children:"cabal"})," updated"]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cabal update\n"})}),(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"build the tools"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git fetch --all --recurse-submodules --tags # Download all branches and tags from the remote repository\ngit checkout $(curl -s https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq -r .tag_name) # Switch to the branch of the latest Cardano Node release\necho -e "package cardano-crypto-praos\\n flags: -external-libsodium-vrf" >> cabal.project.local # Append the cabal.project.local file in the current folder to avoid installing the custom libsodium library\ncabal build cardano-node cardano-cli # Compile the cardano-node and cardano-cli packages found in the current directory\n'})}),(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"clone the result in a directory where PATH can find them"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'sudo cp $(find ./dist-newstyle/build -type f -name "cardano-node") /usr/bin/cardano-node\nsudo cp $(find ./dist-newstyle/build -type f -name "cardano-cli")  /usr/bin/cardano-cli\n'})})]}),(0,s.jsxs)(a.c,{value:"Binaries",label:"Binaries",children:[(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a temporary path to store the pre-built binaries."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir ~/vesting_tmp\ncd ~/vesting_tmp\n"})}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Download the latest static binaries for Linux. Update below URL with the latest link before continuing."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"wget https://update-cardano-mainnet.iohk.io/cardano-node-releases/cardano-node-1.35.5-linux.tar.gz\n"})}),(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Extract the compressed folders"}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"tar -xvf cardano*.gz\n"})}),(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Install the new node and cli binaries."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo mv ~/vesting_tmp/cardano-cli /usr/local/bin/\nsudo mv ~/vesting_tmp/cardano-node /usr/local/bin/\n"})}),(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Clean up temporary path."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd\nrm -rf ~/tmp2\n"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"template-overview",children:"Template overview"}),"\n",(0,s.jsx)(n.p,{children:"Before we dive in let's get familiar with the starter template."}),"\n",(0,s.jsxs)(n.p,{children:["If we now navigate to ",(0,s.jsx)(n.code,{children:"src/contract.ts"})," we see we have a very simple validator already!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/contract.ts"',children:'import { Address, bool, compile, makeValidator, PaymentCredentials, pBool, pfn, Script, ScriptType, V2 } from "@harmoniclabs/plu-ts";\nimport MyDatum from "./MyDatum";\nimport MyRedeemer from "./MyRedeemer";\n\n\n// highlight-start\nexport const contract = pfn([\n    MyDatum.type,\n    MyRedeemer.type,\n    V2.PScriptContext.type\n],  bool)\n(( datum, redeemer, ctx ) =>\n    // always suceeds\n    pBool( true )\n);\n// highlight-end\n\n\n///////////////////////////////////////////////////////////////////\n// ------------------------------------------------------------- //\n// ------------------------- utilities ------------------------- //\n// ------------------------------------------------------------- //\n///////////////////////////////////////////////////////////////////\n\nexport const untypedValidator = makeValidator( contract );\n\nexport const compiledContract = compile( untypedValidator );\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\nexport const scriptMainnetAddr = new Address(\n    "mainnet",\n    new PaymentCredentials(\n        "script",\n        script.hash\n    )\n);\n\nexport const scriptTestnetAddr = new Address(\n    "testnet",\n    new PaymentCredentials(\n        "script",\n        script.hash.clone()\n    )\n);\n\nexport default contract;\n'})}),"\n",(0,s.jsx)(n.p,{children:"Let's focus only on the contract for now;"}),"\n",(0,s.jsxs)(n.p,{children:["this contract expects a ",(0,s.jsx)(n.code,{children:"MyDatum"}),", a ",(0,s.jsx)(n.code,{children:"MyRedeemer"})," and finally a ",(0,s.jsx)(n.code,{children:"PScriptContext"})," to validate a transaction."]}),"\n",(0,s.jsxs)(n.p,{children:["All of the three above are just ",(0,s.jsxs)(n.a,{href:"../onchain/Values/Structs/definition",children:[(0,s.jsx)(n.code,{children:"Struct"}),"s"]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"MyDatum"})," and ",(0,s.jsx)(n.code,{children:"MyRedeemer"})," are types defined by us respectively in ",(0,s.jsx)(n.code,{children:"src/MyDatum/index.ts"})," and ",(0,s.jsx)(n.code,{children:"src/MyRedeemer/index.ts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/MyDatum/index.ts"',children:'import { int, pstruct } from "@harmoniclabs/plu-ts";\n\n// modify the Datum as you prefer\nconst MyDatum = pstruct({\n    Num: {\n        number: int\n    },\n    NoDatum: {}\n});\n\nexport default MyDatum;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/MyRedeemer/index.ts"',children:'import { pstruct } from "@harmoniclabs/plu-ts";\n\n// modify the Redeemer as you prefer\nconst MyRedeemer = pstruct({\n    Option1: {},\n    Option2: {}\n});\n\nexport default MyRedeemer;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["whereas ",(0,s.jsx)(n.code,{children:"PScriptContex"})," is a predefined data structure that is passed by the ",(0,s.jsx)(n.code,{children:"cardano-node"})," itself that will run our smart contract."]}),"\n",(0,s.jsxs)(n.p,{children:["finally, the contract is used in ",(0,s.jsx)(n.code,{children:"src/index.ts"})," which is our entry point."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/index.ts"',children:'import { script } from "./contract";\n\nconsole.log("validator compiled succesfully! \ud83c\udf89\\n");\nconsole.log(\n    JSON.stringify(\n        script.toJson(),\n        undefined,\n        2\n    )\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["the index just imports ",(0,s.jsx)(n.code,{children:"script"})," from ",(0,s.jsx)(n.code,{children:"src/contract.ts"})," adn prints it out in the json form."]}),"\n",(0,s.jsxs)(n.p,{children:["if we go back to ",(0,s.jsx)(n.code,{children:"src/contract.ts"})," we see that the script is obtained using the following steps:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["adapting the validator to the standard using ",(0,s.jsx)(n.a,{href:"../onchain/API/utilities/makeValidator",children:(0,s.jsx)(n.code,{children:"makeValidator"})})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/contract.ts"',children:"/* ... */\n\n// highlight-start\nexport const untypedValidator = makeValidator( contract );\n// highlight-end\n\nexport const compiledContract = compile( untypedValidator );\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\n/* ... */\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["compiling the validator with ",(0,s.jsx)(n.a,{href:"../onchain/API/utilities/compile",children:(0,s.jsx)(n.code,{children:"compile"})})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/contract.ts"',children:"/* ... */\n\nexport const untypedValidator = makeValidator( contract );\n\n// highlight-start\nexport const compiledContract = compile( untypedValidator );\n// highlight-end\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\n/* ... */\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["wrapping it in a ",(0,s.jsx)(n.code,{children:"Script"})," that can be used offchain"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/contract.ts"',children:"/* ... */\n\nexport const untypedValidator = makeValidator( contract );\n\nexport const compiledContract = compile( untypedValidator );\n\n// highlight-start\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n// highlight-end\n\n/* ... */\n"})}),"\n",(0,s.jsx)(n.p,{children:"that is all we need for now."}),"\n",(0,s.jsx)(n.h3,{id:"run-the-template",children:"run the template"}),"\n",(0,s.jsx)(n.p,{children:"If we did every step of above correctly we should be able to run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,s.jsx)(n.p,{children:"and the output should look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'validator compiled succesfully! \ud83c\udf89\n\n{\n  "type": "PlutusScriptV2",\n  "description": "",\n  "cborHex": "56550100002225333573466644494400c0080045261601"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Well congratulations \ud83e\udd73!"}),"\n",(0,s.jsx)(n.p,{children:"this is your first compiled smart contract \ud83c\udf89!"}),"\n",(0,s.jsx)(n.p,{children:"But we won't stop here for sure!"}),"\n",(0,s.jsx)(n.p,{children:"Let's personalize this smart contract."}),"\n",(0,s.jsx)(n.h2,{id:"the-contract",children:"The contract"}),"\n",(0,s.jsx)(n.p,{children:"The contract should succeed if the following two conditions are met:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the transaction is signed by the ",(0,s.jsx)(n.code,{children:"PPubKeyHash"})," defined in the UTxO datum;"]}),"\n",(0,s.jsxs)(n.li,{children:["the transaction lower bound is ",(0,s.jsx)(n.code,{children:"Finite"})," and greather than the datum ",(0,s.jsx)(n.code,{children:"deadline"})," field;"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"vestingdatum",children:(0,s.jsx)(n.code,{children:"VestingDatum"})}),"\n",(0,s.jsx)(n.p,{children:"The first thing we notice is that we need a custom datum."}),"\n",(0,s.jsxs)(n.p,{children:["so we can rename the ",(0,s.jsx)(n.code,{children:"MyDatum"})," folder to ",(0,s.jsx)(n.code,{children:"VestingDatum"})," and modify ",(0,s.jsx)(n.code,{children:"src/VestingDatum/index.ts"})," as follows"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:'import { PPubKeyHash, int, pstruct } from "@harmoniclabs/plu-ts";\n\n// modify the Datum as you prefer\n// highlight-start\nconst VestingDatum = pstruct({\n    VestingDatum: {\n        beneficiary: PPubKeyHash.type,\n        deadline: int // posix time\n    }\n});\n// highlight-end\n\nexport default VestingDatum;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"contract-signature",children:"contract signature"}),"\n",(0,s.jsx)(n.p,{children:"Now that we have our datum structure we can use it in the contract definition."}),"\n",(0,s.jsxs)(n.p,{children:["Since we are changing the contract signature, we also know that we don't need any particular redeemer; so we can just change it to a simple ",(0,s.jsx)(n.code,{children:"data"})," type;"]}),"\n",(0,s.jsxs)(n.p,{children:["We can also delete the ",(0,s.jsx)(n.code,{children:"MyRedeemer"})," directory, if we want, since we don't need it anymore."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"/* imports */\n\nexport const contract = pfn([\n    // highlight-next-line\n    VestingDatum.type,\n    // highlight-next-line\n    data,\n    PScriptContext.type\n],  bool)\n(( datum, _redeemer, ctx ) =>\n    // always succeeds\n    pBool( true )\n);\n\n/* other code */\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contract-logic",children:"contract logic"}),"\n",(0,s.jsx)(n.p,{children:"As for now our contract succeeds every time we use it."}),"\n",(0,s.jsx)(n.p,{children:"that definitely doesn't meet the specification; so we need to change the body of the funciton too."}),"\n",(0,s.jsxs)(n.p,{children:["We know for sure that we need 2 conditions; so we will check them separately using two terms: ",(0,s.jsx)(n.code,{children:"signedByBeneficiary"})," and ",(0,s.jsx)(n.code,{children:"deadlineReached"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"/* imports */\n\nexport const contract = pfn([\n    VestingDatum.type,\n    data,\n    PScriptContext.type\n],  bool)\n(( datum, _redeemer, ctx ) => {\n    // highlight-start\n\n    // inlined\n    const signedByBeneficiary = pBool( false );\n\n    // inlined\n    const deadlineReached = pBool( false );\n\n    return signedByBeneficiary.and( deadlineReached );\n    // highlight-end\n});\n\n/* other code */\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We just initialize them to ",(0,s.jsx)(n.code,{children:"pBool( false )"})," so that if we forget them the contract fails."]}),"\n",(0,s.jsx)(n.p,{children:"But se can already see the structure of the contract this way: we have two conditions, and we want bot to be true."}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["What's ",(0,s.jsx)(n.code,{children:"// inlined"})," for?"]}),(0,s.jsxs)(n.p,{children:["As defined above the terms are inlined ",(0,s.jsx)(n.strong,{children:"every time that are used"})]}),(0,s.jsxs)(n.p,{children:["This is because we are not using ",(0,s.jsx)(n.a,{href:"../onchain/Optimizations/plet",children:(0,s.jsx)(n.code,{children:"plet"})})," to create an actual ",(0,s.jsx)(n.code,{children:"plu-ts"})," variable;"]}),(0,s.jsx)(n.p,{children:"instead we are just holding a reference to that piece of code."}),(0,s.jsxs)(n.p,{children:["This is not necessarly bad because it helps making the contract more readable (and ",(0,s.jsx)(n.code,{children:"plet"})," would have inlined the term anyway in this paritcular case for efficiency)"]}),(0,s.jsxs)(n.p,{children:["but is definitely useful to keep in mind that what we have is ",(0,s.jsx)(n.strong,{children:"always"})," inlined with a small comment"]})]}),"\n",(0,s.jsx)(n.h2,{id:"signedbybeneficiary",children:(0,s.jsx)(n.code,{children:"signedByBeneficiary"})}),"\n",(0,s.jsx)(n.p,{children:"The first condtion for the contract to succeed is:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["the transaction is signed by the ",(0,s.jsx)(n.code,{children:"PPubKeyHash"})," defined in the UTxO datum;"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To check that we can use the ",(0,s.jsxs)(n.a,{href:"../onchain/API/types/PTxInfo#signatories",children:[(0,s.jsx)(n.code,{children:"signatories"})," field"]})," defined in the ",(0,s.jsx)(n.a,{href:"../onchain/API/types/PTxInfo",children:(0,s.jsx)(n.code,{children:"PTxInfo"})})," struct."]}),"\n",(0,s.jsx)(n.p,{children:"We can access the field from the context using the dot notation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ctx.tx.signatories\n"})}),"\n",(0,s.jsxs)(n.p,{children:["the ",(0,s.jsx)(n.code,{children:"signatories"})," field is a list of ",(0,s.jsx)(n.code,{children:"PPubKeyHash"}),"; so we have access to all the ",(0,s.jsx)(n.a,{href:"../onchain/stdlib/TermList",children:(0,s.jsx)(n.code,{children:"TermList"})})," methods."]}),"\n",(0,s.jsxs)(n.p,{children:["so we can use the ",(0,s.jsxs)(n.a,{href:"../onchain/stdlib/TermList#some",children:[(0,s.jsx)(n.code,{children:"some"})," method"]})," to check that ",(0,s.jsx)(n.strong,{children:"at least one"})," element of the list satisfies a given predicate."]}),"\n",(0,s.jsx)(n.p,{children:"In our case:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ctx.tx.signatories.some( signer => signer.eq( datum.beneficiary ) );\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or the equivalent (but sligthly more efficient)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ctx.tx.signatories.some( datum.beneficiary.eqTerm );\n"})}),"\n",(0,s.jsx)(n.p,{children:"And that's it!"}),"\n",(0,s.jsxs)(n.p,{children:["Our ",(0,s.jsx)(n.code,{children:"signedByBeneficiary"})," condition becomes the one-liner"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"// inlined\nconst signedByBeneficiary = ctx.tx.signatories.some( datum.beneficiary.eqTerm );\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deadlinereached",children:(0,s.jsx)(n.code,{children:"deadlineReached"})}),"\n",(0,s.jsx)(n.p,{children:"Now we can pass at the second condtion:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["the transaction lower bound is ",(0,s.jsx)(n.code,{children:"Finite"})," and greather than the datum ",(0,s.jsx)(n.code,{children:"deadline"})," field"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["but what do we mean by ",(0,s.jsx)(n.em,{children:'"transaciton lower bound"'}),"?"]}),(0,s.jsx)(n.p,{children:"That is due to how time is handled on-chain."}),(0,s.jsx)(n.p,{children:"Handling time on chain is definitely not something simple due to the fact that the underlying system is distributed."}),(0,s.jsx)(n.p,{children:"That means that we can't really be 100% sure of the exact moment the script is executed."}),(0,s.jsx)(n.p,{children:"To work around this problem, time is represented on chain with a range in which the transaction is considered valid."}),(0,s.jsx)(n.p,{children:"If ever the transaction where sent outside of the range it would be rejected by the node before even executing the script!"}),(0,s.jsx)(n.p,{children:"So we can at least be sure that the script is excuted in the given time range."})]}),"\n",(0,s.jsxs)(n.p,{children:["We can access the transaction validity time range trough the ",(0,s.jsxs)(n.a,{href:"../onchain/API/types/PTxInfo#interval",children:[(0,s.jsx)(n.code,{children:"interval"})," property"]})," of the ",(0,s.jsx)(n.a,{href:"../onchain/API/types/PTxInfo",children:(0,s.jsx)(n.code,{children:"PTxInfo"})})," struct."]}),"\n",(0,s.jsx)(n.p,{children:"this is done once again using the dot notation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ctx.tx.interval\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"interval"})," type is somewhat complex due to the nested structure; we have"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["two initial properties (",(0,s.jsx)(n.code,{children:"from"})," and ",(0,s.jsx)(n.code,{children:"to"}),") representing the lower and upper bound."]}),"\n",(0,s.jsxs)(n.li,{children:["both the properties then have a ",(0,s.jsx)(n.code,{children:"bound"})," property and an ",(0,s.jsx)(n.code,{children:"inclusive"})," property which is a boolean\n(of the two we are only interested in the ",(0,s.jsx)(n.code,{children:"bound"})," one)"]}),"\n",(0,s.jsxs)(n.li,{children:["finally the ",(0,s.jsx)(n.code,{children:"bound"})," has 3 constructors as below"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const PExtended = pstruct({\n    PNegInf: {},\n    PFinite: { _0: int },\n    PPosInf: {}\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["where the ",(0,s.jsx)(n.code,{children:"PFinite"})," one is the one we are interested in."]}),"\n",(0,s.jsxs)(n.p,{children:["so reaching the ",(0,s.jsx)(n.code,{children:"bound"})," field is the easy part and can be done as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ctx.tx.interval.from.bound\n"})}),"\n",(0,s.jsxs)(n.p,{children:["but then we have to use ",(0,s.jsx)(n.a,{href:"../onchain/Control%20Flow/pmatch",children:(0,s.jsx)(n.code,{children:"pmatch"})})," to understand what constructor was used;"]}),"\n",(0,s.jsxs)(n.p,{children:["in particular we are only interested in the ",(0,s.jsx)(n.code,{children:"PFinite"})," one so we'll use the underscore (",(0,s.jsx)(n.code,{children:"_"}),") wildcard to match the other two."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"pmatch( ctx.tx.interval.from.bound )\n.onPFinite(({ _0: lowerInterval }) => ... )\n._( _ => pBool( false ) )\n"})}),"\n",(0,s.jsx)(n.p,{children:"and now that we have access to the transaction lower bound we can finally check for the deadline to have been passed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"datum.deadline.ltEq( lowerInterval ) \n"})}),"\n",(0,s.jsxs)(n.p,{children:["so the final ",(0,s.jsx)(n.code,{children:"deadlineReached"})," condition becomes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"// inlined\nconst deadlineReached = \n    pmatch( ctx.tx.interval.from.bound )\n    .onPFinite(({ _0: lowerInterval }) =>\n        datum.deadline.ltEq( lowerInterval ) \n    )\n    ._( _ => pBool( false ) )\n"})}),"\n",(0,s.jsx)(n.h2,{id:"compiling-the-contract",children:"compiling the contract"}),"\n",(0,s.jsx)(n.p,{children:"So now the our smart contract should look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"export const contract = pfn([\n    VestingDatum.type,\n    data,\n    PScriptContext.type\n],  bool)\n(( datum, _redeemer, ctx ) => {\n\n    // inlined\n    const signedByBeneficiary = ctx.tx.signatories.some( datum.beneficiary.eqTerm );\n\n    // inlined\n    const deadlineReached = \n        pmatch( ctx.tx.interval.from.bound )\n        .onPFinite(({ _0: lowerInterval }) =>\n                datum.deadline.ltEq( lowerInterval ) \n        )\n        ._( _ => pBool( false ) )\n\n    return signedByBeneficiary.and( deadlineReached );\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["as we saw in the ",(0,s.jsx)(n.a,{href:"./Hello%20World",children:"Hello plu-ts example project"})," we can compile the contract\nby first passing the term to ",(0,s.jsx)(n.a,{href:"../onchain/API/utilities/makeValidator",children:(0,s.jsx)(n.code,{children:"makeValidator"})}),"\nand then pass the result to the ",(0,s.jsx)(n.a,{href:"../onchain/API/utilities/compile",children:(0,s.jsx)(n.code,{children:"compile"})})," function."]}),"\n",(0,s.jsxs)(n.p,{children:["We finally pass the compiled Contract to the ",(0,s.jsx)(n.code,{children:"Script"})," constructor so that we can use it properly."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/VestingDatum/index.ts"',children:"/* contract definition above */\n\nexport const untypedValidator = makeValidator( contract );\n\nexport const compiledContract = compile( untypedValidator );\n\nexport const script = new Script(\n    ScriptType.PlutusV2,\n    compiledContract\n);\n\n/* some other code */\n"})}),"\n",(0,s.jsx)(n.p,{children:"so now running the project using"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run start\n"})}),"\n",(0,s.jsx)(n.p,{children:"we should see something like this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'validator compiled succesfully! \ud83c\udf89\n\n{\n  "type": "PlutusScriptV2",\n  "description": "",\n  "cborHex": "5901445901410100003232323232222533357346664446644a666ae680080045281991980510a502223322533357340042944004c0100084c00c004dc79bae357426010006664664601246ae80c0080040052f588eb8dd6191aba1357446ae88d5d11aba2357446ae88d5d11aba200130083574260100022646666444464664a666ae68c005200010031533357346002900108020a999ab9a300148010401458dc39aab9d00135573c0026ea8010d5d098049aba1300932357426ae88d5d11aba2357446ae88d5d11aba20013009357426012004002466e24dd6991aba135744002601400a6eb4d5d0800800925000300200114985888cc01084008888cc014008c00c0048d55cf1baa0013002222232333006300400130030010023300400300222253335573e0020062660046ae84004d5d10009191801119801001000918011198010010009"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"interacting-with-the-contract",children:"Interacting with the contract"}),"\n",(0,s.jsxs)(n.p,{children:["We will use the native ",(0,s.jsx)(n.code,{children:"npm"})," script functionality to define some scripts to interact arbitrarly with our new contract."]}),"\n",(0,s.jsxs)(n.p,{children:["We can define a new script by adding an entry in the ",(0,s.jsx)(n.code,{children:"scripts"})," field of the ",(0,s.jsx)(n.code,{children:"package.json"})," file that you find in the root of the project."]}),"\n",(0,s.jsx)(n.p,{children:"right now you should see something like this"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    "build": "tsc -p ./tsconfig.json && tsc-alias -p ./tsconfig.json",\n    "start": "npm run build && node dist/index.js"\n},\n'})}),"\n",(0,s.jsx)(n.p,{children:"we can add our own scripts by specifying the script name as key and the command to execute as value."}),"\n",(0,s.jsxs)(n.p,{children:["as an example; say we want a better name for the ",(0,s.jsx)(n.code,{children:'"start"'})," script.; we could do something like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    "build": "tsc -p ./tsconfig.json && tsc-alias -p ./tsconfig.json",\n    "start": "npm run build && node dist/index.js",\n    // highlight-next-line\n    "vesting:compile": "npm run start"\n},\n'})}),"\n",(0,s.jsx)(n.p,{children:"and now running"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:compile\n"})}),"\n",(0,s.jsxs)(n.p,{children:["is equivalent to ",(0,s.jsx)(n.code,{children:"npm run start"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["to keep the project clean we'll create a new directory under ",(0,s.jsx)(n.code,{children:"src"})," called ",(0,s.jsx)(n.code,{children:"app"})," where all our scripts will be."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./vesting-pluts\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 app\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"setup-the-cli-object",children:["setup the ",(0,s.jsx)(n.code,{children:"cli"})," object"]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"app"})," folder create a new directory called ",(0,s.jsx)(n.code,{children:"utils"})," and a new file called ",(0,s.jsx)(n.code,{children:"cli.ts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["here we'll import the ",(0,s.jsx)(n.code,{children:"CardanoCliPluts"})," class from the ",(0,s.jsx)(n.code,{children:"@harmoniclabs/cardanocli-pluts"})," package we installed at the beginning;\nconstruct an instance and export it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/utils/cli.ts"',children:'import { CardanoCliPluts } from "@harmoniclabs/cardanocli-pluts";\n\nexport const cli = new CardanoCliPluts({\n    network: "testnet 1",\n    // socketPath: undefined // defaults to process.env.CARDANO_NODE_SOCKET_PATH\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["this cli will work for the ",(0,s.jsx)(n.code,{children:"preprod"})," testnet."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are working on a private testnet then you can also use the ",(0,s.jsx)(n.code,{children:"dotenv"})," package and specify a custom ",(0,s.jsx)(n.code,{children:"socketPath"})," for the private testnet node."]}),"\n",(0,s.jsxs)(n.p,{children:["you can install ",(0,s.jsx)(n.code,{children:"dotenv"})," by running"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install dotenv\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In a set up like the one in the ",(0,s.jsx)(n.a,{href:"https://github.com/woofpool/cardano-private-testnet-setup",children:(0,s.jsx)(n.code,{children:"woofpool/cardano-private-testnet-setup"})})," the code becomes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/utils/cli.ts"',children:'import { CardanoCliPluts } from "@harmoniclabs/cardanocli-pluts";\nimport { config } from "dotenv";\n\nconfig();\n\nexport const cli = new CardanoCliPluts({\n    network: "testnet 42",\n    socketPath: (process.env.PRIVATE_TESTNET_PATH ?? ".") + "/node-spo1/node.sock"\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"save-the-script",children:"save the script"}),"\n",(0,s.jsx)(n.p,{children:"Now that we have access to the cli we can easly work with the offchain part of plu-ts and the cardano-node."}),"\n",(0,s.jsx)(n.p,{children:"let's start by saving the compiled script to a file when we compile it."}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"src/index.ts"})," file add the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/index.ts"',children:'// highlight-start\nimport { existsSync } from "fs";\nimport { mkdir } from "fs/promises";\n// highlight-end\n\n/* old code */\n\n// highlight-start\nasync function main() \n{\n    if( !existsSync("./testnet") )\n    {\n        await mkdir("./testnet");\n    }\n    cli.utils.writeScript( script, "./testnet/vesting.plutus.json")\n}\nmain();\n// highlight-end\n'})}),"\n",(0,s.jsx)(n.p,{children:"now running"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:compile\n"})}),"\n",(0,s.jsxs)(n.p,{children:["should still print the old result; but it will also create a new ",(0,s.jsx)(n.code,{children:"testnet"})," directory with file called ",(0,s.jsx)(n.code,{children:"vesting.plutus.json"})," in it."]}),"\n",(0,s.jsx)(n.h3,{id:"get-some-keys",children:"get some keys"}),"\n",(0,s.jsx)(n.p,{children:"depending if you are working in private or public testnet\nthere are 2 way to get your keys and start creating transactions:"}),"\n",(0,s.jsxs)(r.c,{children:[(0,s.jsxs)(a.c,{value:"public testnet",label:"public testnet",default:!0,children:[(0,s.jsx)(n.p,{children:"if you are working in the public testnet then you can generate a new pair of keys using"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"cli.address.keyGen()\n"})}),(0,s.jsxs)(n.p,{children:["which executes the ",(0,s.jsx)(n.code,{children:"cardano-cli"})," command"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cardano-cli address key-gen --testnet-magic 1\n"})}),(0,s.jsxs)(n.p,{children:["so to generate 2 pairs of keys we could create a file callde ",(0,s.jsx)(n.code,{children:"genKeys.ts"})," in the ",(0,s.jsx)(n.code,{children:"app"})," folder that looks like this"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { existsSync } from "fs";\nimport { cli } from "./utils/cli";\nimport { Address, PaymentCredentials } from "@harmoniclabs/plu-ts";\nimport { config } from "dotenv";\nimport { mkdir } from "fs/promises";\n\nconfig();\n\nasync function genKeys()\n{\n    const nKeys = 2;\n\n    const promises: Promise<any>[] = [];\n\n    if( !existsSync("./testnet") )\n    {\n        await mkdir("./testnet");\n    }\n    \n    for( let i = 1; i <= nKeys; i++ )\n    {\n        const { privateKey, publicKey } = await cli.address.keyGen();\n        const addr = new Address(\n            "testnet",\n            PaymentCredentials.pubKey( publicKey.hash )\n        );\n        \n        promises.push(\n            cli.utils.writeAddress( addr, `./testnet/address${i}.addr` ),\n            cli.utils.writePublicKey( publicKey, `./testnet/payment${i}.vkey` ),\n            cli.utils.writePrivateKey( privateKey, `./testnet/payment${i}.skey` )\n        );\n    }\n\n    // wait for all files to be copied\n    await Promise.all( promises );\n}\ngenKeys();\n'})}),(0,s.jsxs)(n.p,{children:["then we can add a new ",(0,s.jsx)(n.code,{children:"npm"})," script called ",(0,s.jsx)(n.code,{children:"vesting:genKeys"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    // ...\n    // highlight-next-line\n    "vesting:genKeys": "npm run build:light && node dist/app/genKeys.js"\n}\n'})}),(0,s.jsx)(n.p,{children:"so that running"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:genKeys\n"})}),(0,s.jsxs)(n.p,{children:["should give us 2 pairs of keys and 2 addresses under the ",(0,s.jsx)(n.code,{children:"testnet"})," folder."]}),(0,s.jsxs)(n.admonition,{title:"get some founds",type:"info",children:[(0,s.jsx)(n.p,{children:"remeber to found one of the addresses."}),(0,s.jsxs)(n.p,{children:["you can get some founds as described in the ",(0,s.jsx)(n.a,{href:"./Hello%20World#get-some-founds",children:"Hello World example"})]})]})]}),(0,s.jsxs)(a.c,{value:"private testnet",label:"private testnet",children:[(0,s.jsx)(n.p,{children:"if you are working in the private testnet then you probably want to use some keys you already have."}),(0,s.jsxs)(n.p,{children:["then maybe you can copy those keys in the ",(0,s.jsx)(n.code,{children:"testnet"})," folder we have here."]}),(0,s.jsxs)(n.p,{children:["to do so we can set up a new ",(0,s.jsx)(n.code,{children:"setup.ts"})," script under the ",(0,s.jsx)(n.code,{children:"app"})," folder:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { existsSync } from "fs";\nimport { config } from "dotenv";\nimport { copyFile, mkdir } from "fs/promises";\n\nconfig();\n\nasync function setup()\n{\n    const privateTestnet = process.env.PRIVATE_TESTNET_PATH ?? ".";\n\n    const nKeys = 3;\n\n    const promises: Promise<any>[] = [];\n    if( !existsSync("./testnet") )\n    {\n        await mkdir("./testnet");\n    }\n    \n    for( let i = 1; i <= nKeys; i++ )\n    {\n        promises.push(\n            copyFile(`${privateTestnet}/addresses/payment${i}.addr`, `./testnet/address${i}.addr`),\n            copyFile(`${privateTestnet}/stake-delegator-keys/payment${i}.vkey`, `./testnet/payment${i}.vkey`),\n            copyFile(`${privateTestnet}/stake-delegator-keys/payment${i}.skey`, `./testnet/payment${i}.skey`)\n        );\n    }\n\n    // wait for all files to be copied\n    await Promise.all( promises );\n}\nsetup();\n'})}),(0,s.jsxs)(n.p,{children:["and then include a new ",(0,s.jsx)(n.code,{children:"npm script"})," in ",(0,s.jsx)(n.code,{children:"package.json"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    // ...\n    // highlight-next-line\n    "vesting:setup": "npm run build:light && node dist/app/setup.js"\n}\n'})}),(0,s.jsx)(n.p,{children:"so that you can now run"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:setup\n"})}),(0,s.jsxs)(n.p,{children:["to have your keys and addresses copied in the ",(0,s.jsx)(n.code,{children:"testnet"})," folder"]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"create-a-vesting-utxo",children:"create a vesting utxo"}),"\n",(0,s.jsx)(n.p,{children:"Now we can finally start playing around with the vesting contract."}),"\n",(0,s.jsx)(n.h3,{id:"read-the-script",children:"read the script"}),"\n",(0,s.jsx)(n.p,{children:"Since we already have our file compiled and saved is probably a good idea to read the compiled result instead of re compiling the contract each time we run teh script."}),"\n",(0,s.jsxs)(n.p,{children:["to do so we can once again use the ",(0,s.jsx)(n.code,{children:"cli.utils"})," to read a saved ",(0,s.jsx)(n.code,{children:"Script"}),"; we just need to specify the path."]}),"\n",(0,s.jsx)(n.p,{children:"so in our case we can write:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const script = cli.utils.readScript("./testnet/vesting.plutus.json");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["from here we can generate the script address using the ",(0,s.jsx)(n.code,{children:"Address"})," class (from the offchain of ",(0,s.jsx)(n.code,{children:"plu-ts"}),") and the ",(0,s.jsx)(n.code,{children:"Script"})," as ",(0,s.jsx)(n.code,{children:"PaymentCredentials"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const scriptAddr = new Address(\n    "testnet",\n    PaymentCredentials.script( script.hash )\n);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"get-your-address",children:"get your address"}),"\n",(0,s.jsx)(n.p,{children:"Then to build and send our transaction we are just missing the sender key and address and the beneficiary public key."}),"\n",(0,s.jsxs)(n.p,{children:["using the ",(0,s.jsx)(n.code,{children:"cli.utils"})," once again we can get them very easly"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const privateKey = cli.utils.readPrivateKey("./testnet/payment1.skey");\nconst addr = cli.utils.readAddress("./testnet/address1.addr");\nconst beneficiary = cli.utils.readPublicKey("./testnet/payment2.vkey");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"query-the-address-utxos",children:"query the address utxos"}),"\n",(0,s.jsxs)(n.p,{children:["before we really start building our transaction we need some utxos to use as input;\nwe can get them always using the ",(0,s.jsx)(n.code,{children:"cli"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const [ utxo ] = await cli.query.utxo({ address: addr });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"build-the-transaciton",children:"build the transaciton"}),"\n",(0,s.jsx)(n.p,{children:"then our transaction will be constructed as follow:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"our UTxO as input"}),"\n",(0,s.jsxs)(n.li,{children:["an output to the contract with an attached ",(0,s.jsx)(n.code,{children:"VestingDatum"})]}),"\n",(0,s.jsx)(n.li,{children:"the change going back to the address"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"which translates to the following code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"let tx = await cli.transaction.build({\n    inputs: [{ utxo: utxo }],\n    outputs: [\n        {\n            address: scriptAddr,\n            value: Value.lovelaces( 10_000_000 ),\n            // highlight-start\n            datum: VestingDatum.VestingDatum({\n                beneficiary: pBSToData.$( pByteString( beneficiary.hash.toBuffer() ) ),\n                deadline: pIntToData.$( nowPosix + 10_000 )\n            })\n            // highlight-end\n        }\n    ],\n    changeAddress: addr\n});\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"have you noticed?",type:"info",children:[(0,s.jsxs)(n.p,{children:["the ",(0,s.jsx)(n.code,{children:"datum"})," attached to the output is generated using on-chain code!"]}),(0,s.jsxs)(n.p,{children:["this is done thanks to plu-ts being able to evaluate on chain code and use the result as ",(0,s.jsx)(n.code,{children:"Data"})]}),(0,s.jsxs)(n.p,{children:["this way we can use the on chain types to describe the plutus data offchain; whithout the need to use low level ",(0,s.jsx)(n.code,{children:"Data"})," elements!"]})]}),"\n",(0,s.jsx)(n.h3,{id:"sign-and-submit",children:"sign and submit"}),"\n",(0,s.jsx)(n.p,{children:"so now that we have our transaciton all we need is just to sign and submit it."}),"\n",(0,s.jsxs)(n.p,{children:["And guess what? this is also extremly easy thanks to ",(0,s.jsx)(n.code,{children:"cardano-cli"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"tx = await cli.transaction.sign({ tx, privateKey });\n\nawait cli.transaction.submit({ tx: tx });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["so all we need to do now is to put all together in a file called ",(0,s.jsx)(n.code,{children:"createVesting.ts"})," under the ",(0,s.jsx)(n.code,{children:"app"})," folder"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/createVesting.ts"',children:'import { Address, PaymentCredentials, Value, pBSToData, pByteString, pIntToData } from "@harmoniclabs/plu-ts";\nimport { cli } from "./utils/cli";\nimport VestingDatum from "../VestingDatum";\n\nasync function createVesting()\n{\n    const script = cli.utils.readScript("./testnet/vesting.plutus.json");\n\n    const scriptAddr = new Address(\n        "testnet",\n        PaymentCredentials.script( script.hash )\n    );\n    \n    const privateKey = cli.utils.readPrivateKey("./testnet/payment1.skey");\n    const addr = cli.utils.readAddress("./testnet/address1.addr");\n    const beneficiary = cli.utils.readPublicKey("./testnet/payment2.vkey");\n\n    const utxos = await cli.query.utxo({ address: addr });\n\n    if( utxos.length === 0 )\n    {\n        throw new Error(\n            "no utxos found at address " + addr.toString()\n        );\n    }\n\n    const utxo = utxos[0];\n\n    const nowPosix = Date.now();\n\n    let tx = await cli.transaction.build({\n        inputs: [{ utxo: utxo }],\n        collaterals: [ utxo ],\n        outputs: [\n            {\n                address: scriptAddr,\n                value: Value.lovelaces( 10_000_000 ),\n                datum: VestingDatum.VestingDatum({\n                    beneficiary: pBSToData.$( pByteString( beneficiary.hash.toBuffer() ) ),\n                    deadline: pIntToData.$( nowPosix + 10_000 )\n                })\n            }\n        ],\n        changeAddress: addr\n    });\n\n    tx = await cli.transaction.sign({ tx, privateKey });\n\n    await cli.transaction.submit({ tx: tx });\n}\n\nif( process.argv[1].includes("createVesting") )\n{\n    createVesting();\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["and for the ease of use we'll add a new ",(0,s.jsx)(n.code,{children:"npm script"})," in package.json"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    // ...\n    // highlight-next-line\n    "vesting:create": "npm run build:light && node dist/app/createVesting.js"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"now running"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:create\n"})}),"\n",(0,s.jsx)(n.p,{children:"will generate a new utxo for the smart contract ready to be spent!"}),"\n",(0,s.jsx)(n.h2,{id:"spend-the-locked-utxo",children:"spend the locked utxo"}),"\n",(0,s.jsx)(n.h3,{id:"get-all-you-need",children:"get all you need"}),"\n",(0,s.jsx)(n.p,{children:"You know the process now:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"read the script"}),"\n",(0,s.jsx)(n.li,{children:"build the script address"}),"\n",(0,s.jsx)(n.li,{children:"read address and keys"}),"\n",(0,s.jsx)(n.li,{children:"query utxo"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"these are the steps needed before we can start to build the transaction and are often very similar."}),"\n",(0,s.jsx)(n.p,{children:"so here there's the code. You should be able to understand what it does whithout problems"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Address, DataI, PaymentCredentials } from "@harmoniclabs/plu-ts";\nimport { cli } from "./utils/cli";\n\nasync function claimVesting()\n{\n    const script = cli.utils.readScript("./testnet/vesting.plutus.json");\n\n    const scriptAddr = new Address(\n        "testnet",\n        PaymentCredentials.script( script.hash )\n    );\n    \n    const privateKey = cli.utils.readPrivateKey("./testnet/payment2.skey");\n    const addr = cli.utils.readAddress("./testnet/address2.addr");\n\n    const utxos = await cli.query.utxo({ address: addr });\n    const scriptUtxos = await cli.query.utxo({ address: scriptAddr });\n\n    if( utxos.length === 0 || scriptUtxos.length === 0 )\n    {\n        throw new Error(\n            "no utxos found at address " + addr.toString()\n        );\n    }\n\n    const utxo = utxos[0];\n\n    const pkh = cli.utils.readPublicKey("./testnet/payment2.vkey").hash;\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{title:"use the beneficiary keys!",type:"info",children:[(0,s.jsx)(n.p,{children:"Note that we are reading the keys of the beneficiary we setted in the previous script this time"}),(0,s.jsx)(n.p,{children:"If we used the other keys teh script would fail each time!"})]}),"\n",(0,s.jsx)(n.h3,{id:"build-the-transaciton-1",children:"build the transaciton"}),"\n",(0,s.jsx)(n.p,{children:"this time our transaction will be formed as follows"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"one of our utxos"}),"\n",(0,s.jsxs)(n.li,{children:["the utxo locked at the script address (with corresponding ",(0,s.jsx)(n.code,{children:"Script"})," in order to validate the spending of it)"]}),"\n",(0,s.jsxs)(n.li,{children:["the public key hash as ",(0,s.jsx)(n.code,{children:"requiredSigners"})," element so that it is aviable in ",(0,s.jsx)(n.code,{children:"ctx.tx.signatories"})]}),"\n",(0,s.jsx)(n.li,{children:"our utxo as collateral input that MUST be present every time a script is included in the transaciton"}),"\n",(0,s.jsxs)(n.li,{children:["the ",(0,s.jsx)(n.code,{children:"invalidBefore"})," field corresponding to the last slot heigth (otherwise the transaciton interval is negative infinite and the contract will fail!)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"of the above the last one sounds courious... How do we get the last slot of the blockchain?"}),"\n",(0,s.jsx)(n.p,{children:"once again the cli does that for us too!"}),"\n",(0,s.jsx)(n.p,{children:"we just have to call"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"cli.query.tipSync()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and then access the ",(0,s.jsx)(n.code,{children:"tip"})," field."]}),"\n",(0,s.jsx)(n.p,{children:"so the transaction can be built as follows"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let tx = await cli.transaction.build({\n    inputs: [\n        { utxo: utxo },\n        {\n            utxo: scriptUtxos[0],\n            inputScript: {\n                script: script,\n                datum: "inline",\n                redeemer: new DataI( 0 )\n            }\n        }\n    ],\n    requiredSigners: [ pkh ], // required to be included in script context\n    collaterals: [ utxo ],\n    changeAddress: addr,\n    invalidBefore: cli.query.tipSync().slot\n});\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["the ",(0,s.jsx)(n.code,{children:"TxBuilder"})]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cardano-cli"})," will only work on a server environment"]}),(0,s.jsxs)(n.p,{children:["if you are working in a web environment plu-ts exports a ",(0,s.jsx)(n.code,{children:"TxBuilder"})," class that is extremly similar to how the ",(0,s.jsx)(n.code,{children:"cardano-cli"})," works."]}),(0,s.jsxs)(n.p,{children:["to build a ",(0,s.jsx)(n.code,{children:"TxBuilder"})," instance all you need are the protocol parameters; that as an example you can query easly using the cli"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const txBuilder = new TxBuilder(\n    "testnet",\n    cli.query.protocolParamsSync()\n);\n'})}),(0,s.jsxs)(n.p,{children:["and then you just need to replace ",(0,s.jsx)(n.code,{children:"cli.transaciton.build"})," with 'txBuilder.build'; as in the example"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'let tx = await txBuilder.build({\n    inputs: [\n        { utxo: utxo },\n        {\n            utxo: scriptUtxos[0],\n            inputScript: {\n                script: script,\n                datum: "inline",\n                redeemer: new DataI( 0 )\n            }\n        }\n    ],\n    requiredSigners: [ pkh ], // required to be included in script context\n    collaterals: [ utxo ],\n    changeAddress: addr,\n    invalidBefore: cli.query.tipSync().slot\n});\n'})})]}),"\n",(0,s.jsx)(n.p,{children:"and finally; after we add teh sing and submit code as done previously;"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"tx = await cli.transaction.sign({ tx, privateKey });\n\nawait cli.transaction.submit({ tx: tx });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["we can put all together in a ",(0,s.jsx)(n.code,{children:"claimVesting.ts"})," file in the ",(0,s.jsx)(n.code,{children:"app"})," folder:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/claimVesting.ts"',children:'import { Address, DataI, PaymentCredentials } from "@harmoniclabs/plu-ts";\nimport { cli } from "./utils/cli";\n\nasync function claimVesting()\n{\n    const script = cli.utils.readScript("./testnet/vesting.plutus.json");\n\n    const scriptAddr = new Address(\n        "testnet",\n        PaymentCredentials.script( script.hash )\n    );\n    \n    const privateKey = cli.utils.readPrivateKey("./testnet/payment2.skey");\n    const addr = cli.utils.readAddress("./testnet/address2.addr");\n\n    const utxos = await cli.query.utxo({ address: addr });\n    const scriptUtxos = await cli.query.utxo({ address: scriptAddr });\n\n    if( utxos.length === 0 || scriptUtxos.length === 0 )\n    {\n        throw new Error(\n            "no utxos found at address " + addr.toString()\n        );\n    }\n\n    const utxo = utxos[0];\n\n    const pkh = cli.utils.readPublicKey("./testnet/payment2.vkey").hash;\n\n    let tx = await cli.transaction.build({\n        inputs: [\n            { utxo: utxo },\n            {\n                utxo: scriptUtxos[0],\n                inputScript: {\n                    script: script,\n                    datum: "inline",\n                    redeemer: new DataI( 0 )\n                }\n            }\n        ],\n        requiredSigners: [ pkh ], // required to be included in script context\n        collaterals: [ utxo ],\n        changeAddress: addr,\n        invalidBefore: cli.query.tipSync().slot\n    });\n\n    tx = await cli.transaction.sign({ tx, privateKey });\n\n    await cli.transaction.submit({ tx: tx });\n}\n\nif( process.argv[1].includes("claimVesting") )\n{\n    claimVesting();\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["then after adding a new ",(0,s.jsx)(n.code,{children:"npm script"})," in package.json"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    // ...\n    // highlight-next-line\n    "vesting:claim": "npm run build:light && node dist/app/claimVesting.js"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"To try claim the utxo we can run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:claim\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"wait some seconds",type:"caution",children:[(0,s.jsx)(n.p,{children:"if you run the script shortly after you created and locked the utxo the script will fail!"}),(0,s.jsx)(n.p,{children:"in the previous script we setted a locking period of 10 seconds"}),(0,s.jsx)(n.p,{children:"so you just have to have a little patience :)"})]}),"\n",(0,s.jsx)(n.p,{children:"if everything goes correctly the program should terminate whithout errors."}),"\n",(0,s.jsx)(n.h2,{id:"bonus-return-the-tada",children:"Bonus: return the tADA"}),"\n",(0,s.jsx)(n.p,{children:"if you where in public testnet remeber to return the tADA to the faucet."}),"\n",(0,s.jsx)(n.p,{children:"here; you can add the following file and script to automate everything"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'"scripts": {\n    // ...\n    // highlight-next-line\n    "vesting:returnFaucet": "npm run build:light && node dist/app/returnFaucet.js"\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run vesting:returnFaucet\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="src/app/returnFaucet.ts"',children:'import { PrivateKey, TxOutRef } from "@harmoniclabs/plu-ts";\nimport { cli } from "./utils/cli";\n\nasync function returnFaucet()\n{\n    const utxos: { utxo: TxOutRef }[] = [];\n    const prvtKeys: PrivateKey[] = [];\n    \n    for( let i = 1; i <= 2; i++ )\n    {\n        prvtKeys.push( cli.utils.readPrivateKey(`./testnet/payment${i}.skey`) );\n        const addr = cli.utils.readAddress(`./testnet/address${i}.addr`);\n        \n        utxos.push(\n            ...(await cli.query.utxo({ address: addr }))\n            .map( ({ utxoRef }) => ({ utxo: utxoRef } ))\n        );\n    }\n\n    let returnTADA = await cli.transaction.build({\n        inputs: utxos as any,\n        // the faucet address\n        changeAddress: "addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3"\n    });\n\n    for(const privateKey of prvtKeys)\n    {\n        returnTADA = await cli.transaction.sign({ tx: returnTADA, privateKey });\n    }\n\n    await cli.transaction.submit({ tx: returnTADA });\n}\nif( process.argv[1].includes("returnFaucet") )\n{\n    returnFaucet();\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},44056:(e,n,t)=>{t.d(n,{c:()=>a});t(11504);var s=t(65456);const i={tabItem:"tabItem__kUE"};var r=t(17624);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.c)(i.tabItem,a),hidden:t,children:n})}},24932:(e,n,t)=>{t.d(n,{c:()=>v});var s=t(11504),i=t(65456),r=t(73920),a=t(55592),c=t(95288),l=t(6508),d=t(9096),o=t(21496);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,d.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.Uz)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._M)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=u(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[d,h]=x({queryString:t,groupId:i}),[m,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,o.IN)(t);return[i,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),g=(()=>{const e=d??m;return p({value:e,tabValues:r})?e:null})();(0,c.c)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),j(e)}),[h,j,r]),tabValues:r}}var j=t(93664);const g={tabList:"tabList_fbd4",tabItem:"tabItem_v5XY"};var f=t(17624);function y(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:c}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.MV)(),o=e=>{const n=e.currentTarget,t=l.indexOf(n),i=c[t].value;i!==s&&(d(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.c)("tabs",{"tabs--block":t},n),children:c.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:h,onClick:o,...r,className:(0,i.c)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=m(e);return(0,f.jsxs)("div",{className:(0,i.c)("tabs-container",g.tabList),children:[(0,f.jsx)(y,{...e,...n}),(0,f.jsx)(w,{...e,...n})]})}function v(e){const n=(0,j.c)();return(0,f.jsx)(b,{...e,children:h(e.children)},String(n))}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>a});var s=t(11504);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);