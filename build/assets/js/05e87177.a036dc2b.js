"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||h[m]||r;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:0},i="if then else",p={unversionedId:"onchain/Control Flow/pif",id:"onchain/Control Flow/pif",title:"if then else",description:"As a solution to condtitional code execution plu-ts exposes an if then else construct.",source:"@site/docs/onchain/Control Flow/pif.mdx",sourceDirName:"onchain/Control Flow",slug:"/onchain/Control Flow/pif",permalink:"/docs/onchain/Control Flow/pif",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Control Flow/pif.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Control Flow",permalink:"/docs/category/control-flow"},next:{title:"pmatch",permalink:"/docs/onchain/Control Flow/pmatch"}},s={},l=[{value:"Why <code>pif</code> is a typescript function and not a constant like other <code>plu-ts</code> funcitons?",id:"why-pif-is-a-typescript-function-and-not-a-constant-like-other-plu-ts-funcitons",level:3},{value:"What happens if one of the two branches raises an error?",id:"what-happens-if-one-of-the-two-branches-raises-an-error",level:2}],c={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"if-then-else"},"if then else"),(0,o.kt)("p",null,"As a solution to ",(0,o.kt)("em",{parentName:"p"},"condtitional code execution")," ",(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," exposes an ",(0,o.kt)("em",{parentName:"p"},"if then else")," construct."),(0,o.kt)("p",null,"However, since everything in ",(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," is an expression, the ",(0,o.kt)("em",{parentName:"p"},"if then else")," construct does not allow stuff that in typescript would have been written as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"if( my_condition )\n{\n    doSomething();\n}\n")),(0,o.kt)("p",null,"because we don't really know what to do if the condtion is false."),(0,o.kt)("p",null,"So the ",(0,o.kt)("em",{parentName:"p"},"if then else")," we have in ",(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," is more similar to the typescript ",(0,o.kt)("inlineCode",{parentName:"p"},"? :")," ternary operator, so at the end of the day, ",(0,o.kt)("em",{parentName:"p"},"if then else")," is just a function."),(0,o.kt)("p",null,"Let's look at a simple ",(0,o.kt)("em",{parentName:"p"},"if then else")," construct:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"pif( int ).$( true )\n.then( 42 )\n.else( 69 )\n")),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," expression checks the condition (in our case ",(0,o.kt)("inlineCode",{parentName:"p"},"pBool(true)"),"; remeber that ",(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," is converting the typescript value for us) "),(0,o.kt)("p",null,"and if it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Term<PBool>")," equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"pInt(42)")," otherwhise it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"pInt(69)"),"."),(0,o.kt)("h3",{id:"why-pif-is-a-typescript-function-and-not-a-constant-like-other-plu-ts-funcitons"},"Why ",(0,o.kt)("inlineCode",{parentName:"h3"},"pif")," is a typescript function and not a constant like other ",(0,o.kt)("inlineCode",{parentName:"h3"},"plu-ts")," funcitons?"),(0,o.kt)("p",null,"Since the type of ",(0,o.kt)("em",{parentName:"p"},"if then else")," is something like ",(0,o.kt)("inlineCode",{parentName:"p"},"bool -> a -> a -> a"),", we need to specify the type of ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," ",(0,o.kt)("em",{parentName:"p"},"prior")," to the actual expression."),(0,o.kt)("p",null,"This ensures ",(0,o.kt)("em",{parentName:"p"},"type safety")," so that Typescript can warn you if one of the results is not of the type you expect it to be."),(0,o.kt)("p",null,"Doing so Typescript can catch stuff like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'pif( int ).$( true )\n.then( 42 )\n// "muahahah" is converted to `pStr("muahahah")`\n// which is obviously not of type `int`\n// highlight-error\n.else( "muahahah" )\n')),(0,o.kt)("h2",{id:"what-happens-if-one-of-the-two-branches-raises-an-error"},"What happens if one of the two branches raises an error?"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"plu-ts")," is a ",(0,o.kt)("em",{parentName:"p"},"strict language")," as we saw while having a look at ",(0,o.kt)("a",{parentName:"p",href:"../Values/Functions/Function_appliaciton"},(0,o.kt)("inlineCode",{parentName:"a"},"papp")),"; that means that arguments are evaluated ",(0,o.kt)("em",{parentName:"p"},"prior")," being passed to a function."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"what happens if one of the argument returns an error?")),(0,o.kt)("p",null,"The answer is ",(0,o.kt)("em",{parentName:"p"},"what you expect to happen"),". Or, to be more precise, if the error rose in the branch selected by the boolean, the computation results in an error; if not it returns the result."),(0,o.kt)("p",null,"This is because even if by default functions are strict, ",(0,o.kt)("inlineCode",{parentName:"p"},"pif")," is ",(0,o.kt)("em",{parentName:"p"},"lazy"),"; meaning that it evaluates only the argument it needs and not the others."),(0,o.kt)("p",null,"This is done using ",(0,o.kt)("a",{parentName:"p",href:"../Optimizations/pforce%20and%20pdelay"},(0,o.kt)("inlineCode",{parentName:"a"},"pforce")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"pdelay"))," so the compiled funcion is a bit larger than the one you'd expect."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"if you don't need ",(0,o.kt)("em",{parentName:"p"},"lazyness")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"pstrictIf")," function that emits slightly less code but evaluates both the arguments."),(0,o.kt)("p",{parentName:"blockquote"},"so something like"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"pstrictIf( int ).$( pBool( true ) )\n.$( pInt(42) )\n.$( pInt(69) )\n")),(0,o.kt)("p",{parentName:"blockquote"},"is just fine but something like"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// this results in an error, even if the conditional is true\npstrictIf( int ).$( pBool( true ) )\n.then( pInt(42) )\n.else( perror( int ) ) // KABOOM\n")),(0,o.kt)("p",{parentName:"blockquote"},"generally speaking you should always prefer the plain ",(0,o.kt)("inlineCode",{parentName:"p"},"pif"))))}h.isMDXComponent=!0}}]);