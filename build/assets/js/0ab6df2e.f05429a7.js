"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5604],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:7},o="TermFn<PIns[],POut>",l={unversionedId:"onchain/stdlib/TermFn<PIns,POut>",id:"onchain/stdlib/TermFn<PIns,POut>",title:"TermFn<PIns[],POut>",description:"The type definition of TermFn is more complex than what it actually does; but that is only because it automatically handles functions with an unspecified (potentially infinite) number of parameters;",source:"@site/docs/onchain/stdlib/TermFn<PIns,POut>.mdx",sourceDirName:"onchain/stdlib",slug:"/onchain/stdlib/TermFn<PIns,POut>",permalink:"/docs/onchain/stdlib/TermFn<PIns,POut>",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/stdlib/TermFn<PIns,POut>.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"TermPair<PFstT,PSndT>",permalink:"/docs/onchain/stdlib/TermPair"},next:{title:"TermStruct<StructDef>",permalink:"/docs/onchain/stdlib/TermStruct<StructDef>"}},s={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"termfnpinspout"},(0,a.kt)("inlineCode",{parentName:"h1"},"TermFn<PIns[],POut>")),(0,a.kt)("p",null,"The type definition of ",(0,a.kt)("inlineCode",{parentName:"p"},"TermFn")," is more complex than what it actually does; but that is only because it automatically handles functions with an unspecified (potentially infinite) number of parameters;"),(0,a.kt)("p",null,'All it does tough is just adding the "',(0,a.kt)("inlineCode",{parentName:"p"},"$"),'" method that replaces the ',(0,a.kt)("inlineCode",{parentName:"p"},"papp")," call."),(0,a.kt)("p",null,"to give an idea here how the case of a function from a single input to a single output looks like;"),(0,a.kt)("p",null,"we'll call this type ",(0,a.kt)("inlineCode",{parentName:"p"},"TermLam")," even if there's no type called so in ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type TermLam<PIn extends PType, POut extends PType> =\n    Term<PLam<PIn,POut>> & {\n        $: ( input: Term<PIn> ) => Term<POut>\n    }\n")))}m.isMDXComponent=!0}}]);