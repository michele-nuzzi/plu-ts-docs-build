"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[7722],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>P});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,P=u["".concat(p,".").concat(m)]||u[m]||s[m]||o;return t?r.createElement(P,i(i({ref:n},c),{},{components:t})):r.createElement(P,i({ref:n},c))}));function P(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var d={};for(var p in n)hasOwnProperty.call(n,p)&&(d[p]=n[p]);d.originalType=e,d[u]="string"==typeof e?e:a,i[1]=d;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},52:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:11},i="PPOSIXTimeRange and PInterval",d={unversionedId:"onchain/API/types/PPOSIXTimeRange_and_PInterval",id:"onchain/API/types/PPOSIXTimeRange_and_PInterval",title:"PPOSIXTimeRange and PInterval",description:"used to describe the time interval in which a transaction is considered valid",source:"@site/docs/onchain/API/types/PPOSIXTimeRange_and_PInterval.mdx",sourceDirName:"onchain/API/types",slug:"/onchain/API/types/PPOSIXTimeRange_and_PInterval",permalink:"/docs/onchain/API/types/PPOSIXTimeRange_and_PInterval",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/API/types/PPOSIXTimeRange_and_PInterval.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"PValidatorHash",permalink:"/docs/onchain/API/types/PValidatorHash"},next:{title:"PDatumHash",permalink:"/docs/onchain/API/types/PDatumHash"}},p={},l=[{value:"<code>PInterval</code>",id:"pinterval",level:2},{value:"<code>from</code>",id:"from",level:3},{value:"<code>to</code>",id:"to",level:3},{value:"<code>PLowerBound</code> and <code>PUpperBound</code>",id:"plowerbound-and-pupperbound",level:2},{value:"<code>bound</code>",id:"bound",level:3},{value:"<code>inclusive</code>",id:"inclusive",level:3},{value:"<code>PExtended</code>",id:"pextended",level:2},{value:"<code>PNegInf</code>",id:"pneginf",level:3},{value:"<code>PFinite</code>",id:"pfinite",level:3},{value:"<code>PPosInf</code>",id:"pposinf",level:3}],c={toc:l},u="wrapper";function s(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pposixtimerange-and-pinterval"},(0,a.kt)("inlineCode",{parentName:"h1"},"PPOSIXTimeRange")," and ",(0,a.kt)("inlineCode",{parentName:"h1"},"PInterval")),(0,a.kt)("p",null,"used to describe the time interval in which a transaction is considered valid"),(0,a.kt)("p",null,"definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const PExtended = pstruct({\n    PNegInf: {},\n    PFinite: { _0: int },\n    PPosInf: {}\n});\n\nexport const PUpperBound = pstruct({\n    PUpperBound: {\n        bound: PExtended.type,\n        inclusive: bool \n    }\n});\n\nexport const PLowerBound = pstruct({\n    PLowerBound: {\n        bound: PExtended.type,\n        inclusive: bool \n    }\n});\n\nexport const PInterval = pstruct({\n    PInterval: {\n        from: PLowerBound.type,\n        to: PUpperBound.type\n    }\n});\n\nexport const PPOSIXTimeRange = PInterval;\n")),(0,a.kt)("h2",{id:"pinterval"},(0,a.kt)("inlineCode",{parentName:"h2"},"PInterval")),(0,a.kt)("h3",{id:"from"},(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"#plowerbound-and-pupperbound"},(0,a.kt)("inlineCode",{parentName:"a"},"PLowerBound"))),(0,a.kt)("h3",{id:"to"},(0,a.kt)("inlineCode",{parentName:"h3"},"to")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"#plowerbound-and-pupperbound"},(0,a.kt)("inlineCode",{parentName:"a"},"PUpperBound"))),(0,a.kt)("h2",{id:"plowerbound-and-pupperbound"},(0,a.kt)("inlineCode",{parentName:"h2"},"PLowerBound")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"PUpperBound")),(0,a.kt)("p",null,"even if the two have differnet name they are foundamentaly interchangeable\nsince both have the same strucutre."),(0,a.kt)("h3",{id:"bound"},(0,a.kt)("inlineCode",{parentName:"h3"},"bound")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"#pextended"},(0,a.kt)("inlineCode",{parentName:"a"},"PExtended"))),(0,a.kt)("h3",{id:"inclusive"},(0,a.kt)("inlineCode",{parentName:"h3"},"inclusive")),(0,a.kt)("p",null,"type: ",(0,a.kt)("a",{parentName:"p",href:"../../stdlib/TermBool"},(0,a.kt)("inlineCode",{parentName:"a"},"bool"))),(0,a.kt)("h2",{id:"pextended"},(0,a.kt)("inlineCode",{parentName:"h2"},"PExtended")),(0,a.kt)("p",null,"either an interger or positive/negative infinite representation"),(0,a.kt)("h3",{id:"pneginf"},(0,a.kt)("inlineCode",{parentName:"h3"},"PNegInf")),(0,a.kt)("h3",{id:"pfinite"},(0,a.kt)("inlineCode",{parentName:"h3"},"PFinite")),(0,a.kt)("p",null,"field type: ",(0,a.kt)("a",{parentName:"p",href:"../../stdlib/TermInt"},(0,a.kt)("inlineCode",{parentName:"a"},"int"))),(0,a.kt)("h3",{id:"pposinf"},(0,a.kt)("inlineCode",{parentName:"h3"},"PPosInf")))}s.isMDXComponent=!0}}]);