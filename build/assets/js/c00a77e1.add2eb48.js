"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[2587],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},s="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=l(n),c=i,N=s["".concat(m,".").concat(c)]||s[c]||k[c]||r;return n?a.createElement(N,o(o({ref:t},d),{},{components:n})):a.createElement(N,o({ref:t},d))}));function N(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[s]="string"==typeof e?e:i,o[1]=p;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6049:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:2},o="TermBS",p={unversionedId:"onchain/stdlib/TermBS",id:"onchain/stdlib/TermBS",title:"TermBS",description:"type definition:",source:"@site/docs/onchain/stdlib/TermBS.mdx",sourceDirName:"onchain/stdlib",slug:"/onchain/stdlib/TermBS",permalink:"/docs/onchain/stdlib/TermBS",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/stdlib/TermBS.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"TermBool",permalink:"/docs/onchain/stdlib/TermBool"},next:{title:"TermStr",permalink:"/docs/onchain/stdlib/TermStr"}},m={},l=[{value:"<code>length</code>",id:"length",level:2},{value:"<code>utf8Decoded</code>",id:"utf8decoded",level:2},{value:"<code>concat</code>",id:"concat",level:2},{value:"<code>prepend</code>",id:"prepend",level:2},{value:"<code>subByteString</code>",id:"subbytestring",level:2},{value:"<code>slice</code>",id:"slice",level:2},{value:"<code>at</code>",id:"at",level:2},{value:"<code>eq</code>",id:"eq",level:2},{value:"<code>lt</code>",id:"lt",level:2},{value:"<code>ltEq</code>",id:"lteq",level:2},{value:"<code>gt</code>",id:"gt",level:2},{value:"<code>gtEq</code>",id:"gteq",level:2}],d={toc:l},s="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"termbs"},(0,i.kt)("inlineCode",{parentName:"h1"},"TermBS")),(0,i.kt)("p",null,"type definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type TermBS = Term<PByteString> & {\n\n    readonly length: TermInt\n    \n    readonly utf8Decoded: TermStr\n    \n    readonly concatTerm: TermFn<[PByteString], PByteString>\n    readonly concat: ( other: Term<PByteString>) => TermBS\n\n    readonly prependTerm: TermFn<[PInt], PByteString>\n    readonly prepend: ( byte: Term<PInt> ) => TermBS\n\n    readonly subByteStringTerm: TermFn<[PInt, PInt], PByteString>\n    readonly subByteString: ( fromInclusive: Term<PInt>, ofLength: Term<PInt> ) => TermBS\n    \n    readonly sliceTerm: TermFn<[PInt, PInt], PByteString>\n    readonly slice:     ( fromInclusive: Term<PInt>, toExclusive: Term<PInt> ) => TermBS\n    \n    readonly atTerm:    TermFn<[PInt], PInt>\n    readonly at:        ( index: Term<PInt> ) => TermInt\n\n\n    readonly eqTerm:    TermFn<[PByteString], PBool>\n    readonly eq:        ( other: Term<PByteString> ) => TermBool\n\n    readonly ltTerm:    TermFn<[PByteString], PBool>\n    readonly lt:        ( other: Term<PByteString> ) => TermBool\n\n    readonly ltEqTerm:  TermFn<[PByteString], PBool>\n    readonly ltEq:      ( other: Term<PByteString> ) => TermBool\n\n    readonly gtTerm:    TermFn<[PByteString], PBool>\n    readonly gt:        ( other: Term<PByteString> ) => TermBool\n\n    readonly gtEqTerm:  TermFn<[PByteString], PBool>\n    readonly gtEq:      ( other: Term<PByteString> ) => TermBool\n\n}\n")),(0,i.kt)("h2",{id:"length"},(0,i.kt)("inlineCode",{parentName:"h2"},"length")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"length")),(0,i.kt)("p",{parentName:"admonition"},"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"TermInt")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"plengthBs.$( term )\n"))),(0,i.kt)("h2",{id:"utf8decoded"},(0,i.kt)("inlineCode",{parentName:"h2"},"utf8Decoded")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"utf8Decoded")),(0,i.kt)("p",{parentName:"admonition"},"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"TermStr")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pdecodeUtf8.$( term )\n"))),(0,i.kt)("h2",{id:"concat"},(0,i.kt)("inlineCode",{parentName:"h2"},"concat")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"concat")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBS")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pappendBs.$( term ).$( other )\n"))),(0,i.kt)("p",null,"concatenates the bytestring on which the method is defined on with the one passed as argument and returns a new bytestring as result of the operation"),(0,i.kt)("h2",{id:"prepend"},(0,i.kt)("inlineCode",{parentName:"h2"},"prepend")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"prepend")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"byte")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBS")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pconsBs.$( byte ).$( term )\n"))),(0,i.kt)("p",null,"expects the ",(0,i.kt)("inlineCode",{parentName:"p"},"byte")," argument to be an integer in the range ",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= byte <= 255")),(0,i.kt)("p",null,"adds a single byte at the start of the term the method is defined on and returns a new bytestring as result."),(0,i.kt)("h2",{id:"subbytestring"},(0,i.kt)("inlineCode",{parentName:"h2"},"subByteString")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"subByteString")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"fromInclusive")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"ofLength")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBS")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"psliceBs.$( fromInclusive ).$( ofLength ).$( term )\n"))),(0,i.kt)("p",null,"takes ",(0,i.kt)("inlineCode",{parentName:"p"},"fromInclusive")," as index of the first byte to include in the result and the expected length as ",(0,i.kt)("inlineCode",{parentName:"p"},"ofLength")," as second parameter."),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"ofLength")," bytes starting from the one at index ",(0,i.kt)("inlineCode",{parentName:"p"},"fromInclusive"),"."),(0,i.kt)("p",null,"somewhat more efficient than ",(0,i.kt)("inlineCode",{parentName:"p"},"slice")," as it maps directly to the builtin ",(0,i.kt)("inlineCode",{parentName:"p"},"psliceBs")," function."),(0,i.kt)("h2",{id:"slice"},(0,i.kt)("inlineCode",{parentName:"h2"},"slice")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"slice")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"fromInclusive")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"toExclusive")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBS")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"psliceBs.$( fromInclusive ).$( psub.$( toExclusive ).$( fromInclusive ) ).$( term )\n"))),(0,i.kt)("p",null,"takes ",(0,i.kt)("inlineCode",{parentName:"p"},"fromInclusive")," as index of the first byte to include in the result\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"toExclusive")," as the index of the first byte to exclude"),(0,i.kt)("p",null,"returns the bytes specified in the range"),(0,i.kt)("h2",{id:"at"},(0,i.kt)("inlineCode",{parentName:"h2"},"at")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"at")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermInt")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pindexBs.$( term ).$( index )\n"))),(0,i.kt)("p",null,"returns an integer in range ",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= byte <= 255")," representing the byte at position ",(0,i.kt)("inlineCode",{parentName:"p"},"index")),(0,i.kt)("h2",{id:"eq"},(0,i.kt)("inlineCode",{parentName:"h2"},"eq")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"eq")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"peqBs.$( term ).$( other )\n"))),(0,i.kt)("p",null,"bytestring equality"),(0,i.kt)("h2",{id:"lt"},(0,i.kt)("inlineCode",{parentName:"h2"},"lt")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"lt")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"plessBs.$( term ).$( other )\n"))),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"term")," is strictly less than ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," otherwise"),(0,i.kt)("admonition",{title:"bytestrings order",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"bytestrings are ordered ",(0,i.kt)("em",{parentName:"p"},"lexicographically")),(0,i.kt)("p",{parentName:"admonition"},"meaning that two strings are compared byte by byte"),(0,i.kt)("p",{parentName:"admonition"},"if the the byte of the first bytestring is less than the byte of the second; the first is considered less;"),(0,i.kt)("p",{parentName:"admonition"},"if it the two bytes are equal it checks the next byte"),(0,i.kt)("p",{parentName:"admonition"},"if the second is less than the first; the second is considered less;")),(0,i.kt)("h2",{id:"lteq"},(0,i.kt)("inlineCode",{parentName:"h2"},"ltEq")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"ltEq")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"plessEqBs.$( term ).$( other )\n"))),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"term")," is less or equal than ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," otherwise"),(0,i.kt)("h2",{id:"gt"},(0,i.kt)("inlineCode",{parentName:"h2"},"gt")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"gt")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pgreaterBS.$( term ).$( other )\n"))),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"term")," is strictly greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," otherwise"),(0,i.kt)("h2",{id:"gteq"},(0,i.kt)("inlineCode",{parentName:"h2"},"gtEq")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"gtEq")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"other")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PByteString>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pgreaterEqBS.$( term ).$( other )\n"))),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"term")," is greater or equal than ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," otherwise"))}k.isMDXComponent=!0}}]);