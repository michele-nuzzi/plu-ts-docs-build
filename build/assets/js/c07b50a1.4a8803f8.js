"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[2460],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,d=u["".concat(p,".").concat(m)]||u[m]||f[m]||r;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},o="Partial function application",s={unversionedId:"onchain/Values/Functions/partial_function_app",id:"onchain/Values/Functions/partial_function_app",title:"Partial function application",description:"When a plu-ts function takes more than one argument, like the pTwoIntegersList we built explaining pfn, it is possible to get new functions from the first by passing only some of the parameters.",source:"@site/docs/onchain/Values/Functions/partial_function_app.mdx",sourceDirName:"onchain/Values/Functions",slug:"/onchain/Values/Functions/partial_function_app",permalink:"/docs/onchain/Values/Functions/partial_function_app",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Values/Functions/partial_function_app.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Function application",permalink:"/docs/onchain/Values/Functions/Function_appliaciton"},next:{title:"builtins",permalink:"/docs/onchain/Values/Functions/builtins"}},p={},l=[],c={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"partial-function-application"},"Partial function application"),(0,a.kt)("p",null,"When a ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," function takes more than one argument, like the ",(0,a.kt)("inlineCode",{parentName:"p"},"pTwoIntegersList")," ",(0,a.kt)("a",{parentName:"p",href:"./plam_and_pfn#pfn"},"we built explaining ",(0,a.kt)("inlineCode",{parentName:"a"},"pfn")),", it is possible to get new functions from the first by passing only ",(0,a.kt)("em",{parentName:"p"},"some")," of the parameters."),(0,a.kt)("p",null,"Since the type of ",(0,a.kt)("inlineCode",{parentName:"p"},"pTwoIntegersList")," was something like ",(0,a.kt)("inlineCode",{parentName:"p"},"int -> int -> list( int )"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pTwoIntegersList")," expects ",(0,a.kt)("em",{parentName:"p"},"2")," arguments; however if we pass only 1 the result will be a valid Term of type ",(0,a.kt)("inlineCode",{parentName:"p"},"int -> list( int )"),"; which is another ",(0,a.kt)("inlineCode",{parentName:"p"},"plu-ts")," function!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"}," // this is a Term from PInt to PList<PInt>!\nconst pListWith42First = pTwoIntegersList.$( 42 );\n")),(0,a.kt)("p",null,"In particular, the new function we get behaves just like the first but with the arguments already passed that are fixed and can't be changed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// equivalent to pTwoIntegersList.$( 42 ).$( 69 )\nconst niceList = pListWith42First.$( 69 );\n")),(0,a.kt)("p",null,"This not only reduces the number of new functions you need to create but is also ",(0,a.kt)("strong",{parentName:"p"},"more efficient")," than wrapping the first function inside of a new lambda."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// bad practice;\nconst pInefficientListWith42First = plam( int, list( int ) )\n    ( int2 =>\n        // highlight-bad-practice\n        pTwoIntegersList.$( 42 ).$( int2 )\n    );\n")),(0,a.kt)("p",null,"Even if the compiler is smart enough to optimize some trivial cases, it is still best practice to avoid doing this."))}f.isMDXComponent=!0}}]);