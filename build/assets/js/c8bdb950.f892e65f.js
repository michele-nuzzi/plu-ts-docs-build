"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[8744],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),c=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return o.createElement(s.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},h=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=c(n),h=a,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||r;return n?o.createElement(d,i(i({ref:e},p),{},{components:n})):o.createElement(d,i({ref:e},p))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[u]="string"==typeof t?t:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9545:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},i="pmatch",l={unversionedId:"onchain/Control Flow/pmatch",id:"onchain/Control Flow/pmatch",title:"pmatch",description:"When we had our first look at the structs, we hinted at the possibility of custom control flows.",source:"@site/docs/onchain/Control Flow/pmatch.mdx",sourceDirName:"onchain/Control Flow",slug:"/onchain/Control Flow/pmatch",permalink:"/docs/onchain/Control Flow/pmatch",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Control Flow/pmatch.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"if then else",permalink:"/docs/onchain/Control Flow/pif"},next:{title:"precursive",permalink:"/docs/onchain/Control Flow/precursive"}},s={},c=[{value:"the underscore (<code>_</code>) wildcard",id:"the-underscore-_-wildcard",level:2},{value:"inline dot notation",id:"inline-dot-notation",level:2}],p={toc:c},u="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,o.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pmatch"},(0,a.kt)("inlineCode",{parentName:"h1"},"pmatch")),(0,a.kt)("p",null,"When we had our first look at the ",(0,a.kt)("a",{parentName:"p",href:"../Values/Structs/definition"},"structs"),", we hinted at the possibility of ",(0,a.kt)("em",{parentName:"p"},"custom control flows"),"."),(0,a.kt)("p",null,"These are possible thanks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"pmatch")," construct."),(0,a.kt)("p",null,"To understand why this is extremely useful, let's take our ",(0,a.kt)("inlineCode",{parentName:"p"},"Toy")," struct we defined looking at ",(0,a.kt)("inlineCode",{parentName:"p"},"pstruct"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const Toy = pstruct({\n    Stick: {},\n    Ball: {\n        size: int,\n        isSoft: bool\n    },\n    Mailman: {\n        name: str,\n        age: Age.type\n    }\n})\n")),(0,a.kt)("p",null,"And let's say we want to have a function that extracts the name of the mailman our dog plays with when we're out. It would look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const getMailmanName = plam( Toy.type, str )\n( toy =>\n    pmatch( toy )\n    .onMailman( mailman => mailman.name )\n    .onStick( _ => pStr("") )\n    .onBall(  _ => pStr("") )\n)\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pmatch")," is taking a struct ",(0,a.kt)("inlineCode",{parentName:"p"},"Term")," and returns a Typescript object with all the names of possible constructors that struct has, based on its definition. "),(0,a.kt)("p",null,"It then executes the branch based on the constructor used to get the struct instance."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"pmatch")," branch gets as input the instance of the sturct with all fields aviable trough dot notation."),(0,a.kt)("p",null,"This way the defined function returns the name of the mailman if the Toy was actually constructed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mailman")," constructor; otherwise it returns an empty string."),(0,a.kt)("h2",{id:"the-underscore-_-wildcard"},"the underscore (",(0,a.kt)("inlineCode",{parentName:"h2"},"_"),") wildcard"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pmatch")," will force you to cover the cases for all constructors; but many times we only want to do something if the struct was built using one specific constructor without regard for any other constructors."),(0,a.kt)("p",null,"In fact we found ourselves in a very similar case in the example above: we want to do something only in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mailman")," case but not in the others."),(0,a.kt)("p",null,"For situations like these there is the underscore (",(0,a.kt)("inlineCode",{parentName:"p"},"_"),") wildcard, that allows us to rewrite our function as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const getMailmanName = plam( Toy.type, str )\n( toy =>\n    pmatch( toy )\n    .onMailman( mailman => mailman.name )\n    ._( _ => pStr("") )\n)\n')),(0,a.kt)("p",null,"This not only makes the code more readable but in the vast majority of the cases it also makes it more efficient!"),(0,a.kt)("h2",{id:"inline-dot-notation"},"inline dot notation"),(0,a.kt)("p",null,"Now that we have a way to extract the name of the mailman from a Toy, we need to pass the actual toy to the fuction we just defined."),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"pmatch")," function, our code would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// remember the definition of `Dog`\nconst Dog = pstruct({\n    Dog: {\n        name: str,\n        age: Age.type,\n        favouriteToy: Toy.type\n    }\n});\n\nconst getMailmanNameFromDog = plam( Dog.type, str )\n( dog =>\n    pmatch( dog )\n    .onDog( dogInstance =>\n        getMailmanName.$( dogInstance.favouriteToy )\n    )\n)\n")),(0,a.kt)("p",null,"This works just fine but is a lot of code just to get a field of a constructor we know is unique..."),(0,a.kt)("p",null,"Fortunately for us, if the struct definition has only one possible constructor,\nthis struct term directly exposes the fields; so that we can threat it as a normal javascript object "),(0,a.kt)("p",null,"This allows us to rewrite the function as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const getMailmanNameFromDog = plam( Dog.type, str )\n( dog => \n    getMailmanName.$( dog.favouriteToy )\n)\n")),(0,a.kt)("p",null,"which is a lot cleaner!"))}m.isMDXComponent=!0}}]);