"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5790],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="pforce and pdelay",p={unversionedId:"onchain/Optimizations/pforce and pdelay",id:"onchain/Optimizations/pforce and pdelay",title:"pforce and pdelay",description:"plet and phoist are the two main tools to use when focusing on optimizations;",source:"@site/docs/onchain/Optimizations/pforce and pdelay.mdx",sourceDirName:"onchain/Optimizations",slug:"/onchain/Optimizations/pforce and pdelay",permalink:"/docs/onchain/Optimizations/pforce and pdelay",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Optimizations/pforce and pdelay.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"phoist",permalink:"/docs/onchain/Optimizations/phoist"},next:{title:"stdlib",permalink:"/docs/category/stdlib"}},l={},s=[],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pforce-and-pdelay"},(0,r.kt)("inlineCode",{parentName:"h1"},"pforce")," and ",(0,r.kt)("inlineCode",{parentName:"h1"},"pdelay")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"plet")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"phoist")," are the two main tools to use when focusing on optimizations; "),(0,r.kt)("p",null,"this is because they significantly reduce both script size and cost of execution."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pforce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pdelay")," do slightly increase the size of a script but when used properly they can save you quite a bit on execution costs."),(0,r.kt)("p",null,"As we know, ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," is strictly evaluated, meaning that arguments are evaluated before being passed to a function."),(0,r.kt)("p",null,"We can opt out of this behaviour using ",(0,r.kt)("inlineCode",{parentName:"p"},"pdelay")," which wraps a term of any type in a ",(0,r.kt)("inlineCode",{parentName:"p"},"delayed")," type so a term of type ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"delayed( int )")," if passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"pdelay"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"delayed")," type can be unwrapped only using ",(0,r.kt)("inlineCode",{parentName:"p"},"pforce"),"; that finally executes the term."),(0,r.kt)("p",null,"There are two main reasons for why we would want to do this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"delaying the execution of some term we might not need at all"),(0,r.kt)("li",{parentName:"ul"},"prevent to raise unwanted errors")),(0,r.kt)("p",null,"One example of the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"pforce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pdelay")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"pif")," function."),(0,r.kt)("p",null,"In fact, the base ",(0,r.kt)("em",{parentName:"p"},"if then else")," function is ",(0,r.kt)("inlineCode",{parentName:"p"},"pstrictIf"),", however when we use an ",(0,r.kt)("em",{parentName:"p"},"if then else")," statement we only need one of the two arguments to be actually evaluated."),(0,r.kt)("p",null,"So when we call ",(0,r.kt)("inlineCode",{parentName:"p"},"pif"),", it is just as if we were doing something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"pforce(\n    pstrictIf( delayed( returnType ) )\n    .$( myCondtion )\n    .$(\n        pdelay( caseTrue )\n    )\n    .$(\n        pdelay( caseFalse )\n    )\n)\n")),(0,r.kt)("p",null,"so that we only evaluate what we need."),(0,r.kt)("p",null,"Not only that, but if one of the two branches throws an error but we don't need it, everything goes through smoothly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"pforce(\n    pstrictIf( delayed( int ) )\n    .$( true )\n    .$(\n        pdelay( pInt( 42 ) )\n    )\n    .$(\n        pdelay( perror( int ) )\n    )\n)\n")),(0,r.kt)("p",null,"Here, everything is ok. If instead we just used the plain ",(0,r.kt)("inlineCode",{parentName:"p"},"pstrictIf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"    pstrictIf( int )\n    .$( pBool( true ) )\n    .$( pInt( 42 ) )\n    // highlight-error\n    .$( perror( int ) ) // KABOOM !!!\n")),(0,r.kt)("p",null,"this results in an error, because the error is evaluated ",(0,r.kt)("em",{parentName:"p"},"before")," being passed as argument."))}u.isMDXComponent=!0}}]);