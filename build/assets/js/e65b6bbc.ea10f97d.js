"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>T});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),s=l(n),N=i,T=s["".concat(p,".").concat(N)]||s[N]||k[N]||r;return n?a.createElement(T,o(o({ref:t},d),{},{components:n})):a.createElement(T,o({ref:t},d))}));function T(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=N;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[s]="string"==typeof e?e:i,o[1]=m;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},8723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>m,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:5},o="TermList<PElemsType>",m={unversionedId:"onchain/stdlib/TermList",id:"onchain/stdlib/TermList",title:"TermList<PElemsType>",description:"type definition:",source:"@site/docs/onchain/stdlib/TermList.mdx",sourceDirName:"onchain/stdlib",slug:"/onchain/stdlib/TermList",permalink:"/docs/onchain/stdlib/TermList",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/stdlib/TermList.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"TermStr",permalink:"/docs/onchain/stdlib/TermStr"},next:{title:"TermPair<PFstT,PSndT>",permalink:"/docs/onchain/stdlib/TermPair"}},p={},l=[{value:"<code>head</code>",id:"head",level:2},{value:"<code>tail</code>",id:"tail",level:2},{value:"<code>length</code>",id:"length",level:2},{value:"<code>at</code>",id:"at",level:2},{value:"<code>find</code>",id:"find",level:2},{value:"<code>filter</code>",id:"filter",level:2},{value:"<code>prepend</code>",id:"prepend",level:2},{value:"<code>map</code>",id:"map",level:2},{value:"<code>every</code>",id:"every",level:2},{value:"<code>some</code>",id:"some",level:2}],d={toc:l},s="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"termlistpelemstype"},(0,i.kt)("inlineCode",{parentName:"h1"},"TermList<PElemsType>")),(0,i.kt)("p",null,"type definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type TermList<PElemsT extends PDataRepresentable> = Term<PList<PElemsT>> & {\n\n    readonly head: UtilityTermOf<PElemsT>\n\n    readonly tail: TermList<PElemsT>\n\n    readonly length: TermInt\n\n    readonly atTerm:        TermFn<[PInt], PElemsT>\n    readonly at:            ( index: Term<PInt> ) => UtilityTermOf<PElemsT> \n    \n    readonly findTerm:      TermFn<[PLam<PElemsT,PBool>], PMaybeT<PElemsT>>\n    readonly find:          ( predicate: Term<PLam<PElemsT,PBool>> ) => Term<PMaybeT<PElemsT>>\n\n    readonly filterTerm:    TermFn<[PLam<PElemsT,PBool>], PList<PElemsT>>\n    readonly filter:        ( predicate: Term<PLam<PElemsT,PBool>> ) => TermList<PElemsT>\n\n    readonly preprendTerm:  TermFn<[PElemsT], PList<PElemsT>>\n    readonly preprend:      ( elem: Term<PElemsT> ) => TermList<PElemsT>\n    \n    readonly mapTerm: <ResultT extends ConstantableTermType>( resultT: ResultT ) =>\n        TermFn<[PLam<PElemsT, ToPType<ResultT>>], PList<ToPType<ResultT>>>\n    readonly map:     <PResultElemT extends PType>( f: Term<PLam<PElemsT,PResultElemT>> ) => \n        TermList<PResultElemT>\n\n    readonly everyTerm: TermFn<[PLam<PElemsT, PBool>], PBool>\n    readonly every:     ( predicate: Term<PLam<PElemsT, PBool>> ) => TermBool\n    \n    readonly someTerm:  TermFn<[PLam<PElemsT, PBool>], PBool>\n    readonly some:      ( predicate: Term<PLam<PElemsT, PBool>> ) => TermBool\n\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"most of the equivalent expressions and some of the terms that requre some other informations are ",(0,i.kt)("a",{parentName:"p",href:"../Types#plu-ts-generics"},(0,i.kt)("inlineCode",{parentName:"a"},"plu-ts")," generics"))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"What is ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"UtilityTermOf"),"?"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"TermList")," is a generic, and it works for every ",(0,i.kt)("inlineCode",{parentName:"p"},"PType")),(0,i.kt)("p",{parentName:"admonition"},"However, given a generic ",(0,i.kt)("inlineCode",{parentName:"p"},"PType")," we don't know what is its utility term or even if it has any"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf")," handles all that; if ",(0,i.kt)("inlineCode",{parentName:"p"},"PElemsT")," is something that can have an utility term it returns that utility term;\notherwise returns the plain term."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},"example")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf<PByteString>")," === ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBS")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf<PDelayed<PByteString>>")," === ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PDelayed<PByteString>>"))),(0,i.kt)("h2",{id:"head"},(0,i.kt)("inlineCode",{parentName:"h2"},"head")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"head")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"throws"))," if the list is empty (",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"phead( elemsT ).$( term )\n"))),(0,i.kt)("p",null,"returns the first element of the list"),(0,i.kt)("h2",{id:"tail"},(0,i.kt)("inlineCode",{parentName:"h2"},"tail")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"tail")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"throws"))," if the list is empty (",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"ptail( elemsT ).$( term )\n"))),(0,i.kt)("p",null,"returns a new list with the same elements of the term except for the first one."),(0,i.kt)("h2",{id:"length"},(0,i.kt)("inlineCode",{parentName:"h2"},"length")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"length")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermInt")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"plength( elemsT ).$( term )\n")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"O(n)")))),(0,i.kt)("p",null,"returns the number of elements present in the list."),(0,i.kt)("h2",{id:"at"},(0,i.kt)("inlineCode",{parentName:"h2"},"at")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"at")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PInt>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"UtilityTermOf<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"throws"))," if ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," >= ",(0,i.kt)("inlineCode",{parentName:"p"},"length")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pindex( elemsT ).$( term ).$( index )\n"))),(0,i.kt)("p",null,"returns the element at position ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),"."),(0,i.kt)("h2",{id:"find"},(0,i.kt)("inlineCode",{parentName:"h2"},"find")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"find")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PLam<PElemsT,PBool>>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PMaybeT<PElemsT>>")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pfind( elemsT ).$( predicate ).$( term )\n"))),(0,i.kt)("p",null,"returns ",(0,i.kt)("inlineCode",{parentName:"p"},"PMaybe( elemsT ).Just({ val: elem })")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"elem")," is the first element of the list that satisfies the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate"),";\nreturns ",(0,i.kt)("inlineCode",{parentName:"p"},"PMaybe( elemsT ).Nothing({})")," if none of the elements satisfies the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate"),"."),(0,i.kt)("h2",{id:"filter"},(0,i.kt)("inlineCode",{parentName:"h2"},"filter")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"filter")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PLam<PElemsT,PBool>>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermList<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pfilter( elemsT ).$( predicate ).$( term )\n"))),(0,i.kt)("p",null,"returns a new list containing only the elements that satisfy the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate"),"."),(0,i.kt)("h2",{id:"prepend"},(0,i.kt)("inlineCode",{parentName:"h2"},"prepend")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"prepend")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"elem")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermList<PElemsT>")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pprepend( elemsT ).$( elem ).$( term )\n"))),(0,i.kt)("p",null,"returns a new list with the ",(0,i.kt)("inlineCode",{parentName:"p"},"elem")," element added at the start of the list."),(0,i.kt)("h2",{id:"map"},(0,i.kt)("inlineCode",{parentName:"h2"},"map")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"map")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PLam<PElemsT,PResultElemT>>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermList<PResultElemT>")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pmap( elemsT, resultT ).$( f ).$( term )\n"))),(0,i.kt)("p",null,"returns a new list containing the result of applying ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," to the element in the same position."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE"))," ",(0,i.kt)("inlineCode",{parentName:"p"},"mapTerm")," requires the return type of ",(0,i.kt)("inlineCode",{parentName:"p"},"f"),"; this is not true for ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," because ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," can understand the type directly from the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"f"),"."),(0,i.kt)("h2",{id:"every"},(0,i.kt)("inlineCode",{parentName:"h2"},"every")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"every")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PLam<PElemsT, PBool>>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"pevery( elemsT ).$( predicate ).$( list )\n"))),(0,i.kt)("p",null,"applies the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," to each term of the list and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," if any of them is ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," otherwise;"),(0,i.kt)("h2",{id:"some"},(0,i.kt)("inlineCode",{parentName:"h2"},"some")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"some")),(0,i.kt)("p",{parentName:"admonition"},"parameter: ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Term<PLam<PElemsT, PBool>>")),(0,i.kt)("p",{parentName:"admonition"},"returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"TermBool")),(0,i.kt)("p",{parentName:"admonition"},"equivalent expression:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"psome( elemsT ).$( predicate ).$( list )\n"))),(0,i.kt)("p",null,"applies the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicate")," to each term of the list and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )")," if any of them is ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( true )"),"; ",(0,i.kt)("inlineCode",{parentName:"p"},"pBool( false )")," otherwise;"))}k.isMDXComponent=!0}}]);