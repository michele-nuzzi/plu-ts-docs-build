"use strict";(self.webpackChunkplu_ts_docs=self.webpackChunkplu_ts_docs||[]).push([[5431],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="Function application",p={unversionedId:"onchain/Values/Functions/Function_appliaciton",id:"onchain/Values/Functions/Function_appliaciton",title:"Function application",description:"Lambdas and functions in general in plu-ts are often just constants seen from the typescript world, however we usually know that what we have is more than just a constant and that it can take arguments.",source:"@site/docs/onchain/Values/Functions/Function_appliaciton.mdx",sourceDirName:"onchain/Values/Functions",slug:"/onchain/Values/Functions/Function_appliaciton",permalink:"/docs/onchain/Values/Functions/Function_appliaciton",draft:!1,editUrl:"https://github.com/HarmonicLabs/plu-ts/tree/main/packages/create-docusaurus/templates/shared/docs/onchain/Values/Functions/Function_appliaciton.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"plam and pfn",permalink:"/docs/onchain/Values/Functions/plam_and_pfn"},next:{title:"Partial function application",permalink:"/docs/onchain/Values/Functions/partial_function_app"}},s={},l=[{value:"the &quot;<code>$</code>&quot; method",id:"the--method",level:2}],u={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"function-application"},"Function application"),(0,r.kt)("p",null,"Lambdas and functions in general in ",(0,r.kt)("inlineCode",{parentName:"p"},"plu-ts")," are often just constants seen from the typescript world, however we usually know that what we have is more than just a constant and that it can take arguments."),(0,r.kt)("p",null,"For this particular reason we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"papp"),' function (which stands  for  "',(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"plu-ts")," applicaiton"),'")and all it does is tell Typescript that we want to ',(0,r.kt)("em",{parentName:"p"},"apply")," one term to another, or in other words pass an argument to a function."),(0,r.kt)("p",null,"The type signature of papp is something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function papp<Input extends PType, Output extends PType>(\n    funcTerm: Term<PLam<Input,Output>>,\n    argTerm : Term<Input> \n) : Term<Output>\n")),(0,r.kt)("p",null,"as we'll see in the ",(0,r.kt)("a",{parentName:"p",href:"./partial_function_app"},"next section"),", functions can be ",(0,r.kt)("em",{parentName:"p"},"partially applied")," so, to preserve this behaviour, papp only takes two arguments:"),(0,r.kt)("p",null,"1) the function we want to pass the argument to"),(0,r.kt)("p",null,"2) the argument"),(0,r.kt)("p",null,"then it checks the types are matching, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"evaluates the argument and applies the result of the evaluation"))," and finally returns the result."),(0,r.kt)("h2",{id:"the--method"},'the "',(0,r.kt)("inlineCode",{parentName:"h2"},"$"),'" method'),(0,r.kt)("p",null,"However, having to use an external function in order to pass arguments tends to make the code hard to read."),(0,r.kt)("p",null,"Here is an example of code if all we had was ",(0,r.kt)("inlineCode",{parentName:"p"},"papp"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"papp(\n    papp(\n        pTwoIntegersList,\n        42\n    ),\n    69\n);\n")),(0,r.kt)("p",null,"For this reason, often you'll encounter Terms that have a type that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type LambdaWithApply =\n    Term<PLam<SomeInput, SomeOutput>> // this is our usual type\n    & { // extended with some functionalities\n        $: ( input: Term<SomeInput> ) => Term<SomeOutput>\n    }\n")),(0,r.kt)("p",null,"where the ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," method definition is often nothing more than:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'myTerm["$"] = ( someInput: Term<SomeInput> ) => papp( myTerm, someInput );\n')),(0,r.kt)("p",null,"At first glance, this seems like it does nothing fancy, but it allows us to transform the previous code in something more readable like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"pTwoIntegersList.$( 42 ).$( 69 )\n")))}m.isMDXComponent=!0}}]);